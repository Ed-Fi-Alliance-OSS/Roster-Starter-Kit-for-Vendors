/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.Roster.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.Roster.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmStaffEducationOrganizationEmploymentAssociationSalary
    /// </summary>
    [DataContract(Name = "tpdm_staffEducationOrganizationEmploymentAssociationSalary")]
    public partial class TpdmStaffEducationOrganizationEmploymentAssociationSalary : IEquatable<TpdmStaffEducationOrganizationEmploymentAssociationSalary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmStaffEducationOrganizationEmploymentAssociationSalary" /> class.
        /// </summary>
        /// <param name="salaryTypeDescriptor">The type of salary that a staff member is receiving..</param>
        /// <param name="salaryAmount">The salary of a staff member..</param>
        /// <param name="salaryMaxRange">The maximum salary range for a staff..</param>
        /// <param name="salaryMinRange">The minimum salary range for a staff..</param>
        public TpdmStaffEducationOrganizationEmploymentAssociationSalary(string salaryTypeDescriptor = default(string), double salaryAmount = default(double), int salaryMaxRange = default(int), int salaryMinRange = default(int))
        {
            this.SalaryTypeDescriptor = salaryTypeDescriptor;
            this.SalaryAmount = salaryAmount;
            this.SalaryMaxRange = salaryMaxRange;
            this.SalaryMinRange = salaryMinRange;
        }

        /// <summary>
        /// The type of salary that a staff member is receiving.
        /// </summary>
        /// <value>The type of salary that a staff member is receiving.</value>
        [DataMember(Name = "salaryTypeDescriptor", EmitDefaultValue = false)]
        public string SalaryTypeDescriptor { get; set; }

        /// <summary>
        /// The salary of a staff member.
        /// </summary>
        /// <value>The salary of a staff member.</value>
        [DataMember(Name = "salaryAmount", EmitDefaultValue = false)]
        public double SalaryAmount { get; set; }

        /// <summary>
        /// The maximum salary range for a staff.
        /// </summary>
        /// <value>The maximum salary range for a staff.</value>
        [DataMember(Name = "salaryMaxRange", EmitDefaultValue = false)]
        public int SalaryMaxRange { get; set; }

        /// <summary>
        /// The minimum salary range for a staff.
        /// </summary>
        /// <value>The minimum salary range for a staff.</value>
        [DataMember(Name = "salaryMinRange", EmitDefaultValue = false)]
        public int SalaryMinRange { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmStaffEducationOrganizationEmploymentAssociationSalary {\n");
            sb.Append("  SalaryTypeDescriptor: ").Append(SalaryTypeDescriptor).Append("\n");
            sb.Append("  SalaryAmount: ").Append(SalaryAmount).Append("\n");
            sb.Append("  SalaryMaxRange: ").Append(SalaryMaxRange).Append("\n");
            sb.Append("  SalaryMinRange: ").Append(SalaryMinRange).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmStaffEducationOrganizationEmploymentAssociationSalary);
        }

        /// <summary>
        /// Returns true if TpdmStaffEducationOrganizationEmploymentAssociationSalary instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmStaffEducationOrganizationEmploymentAssociationSalary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmStaffEducationOrganizationEmploymentAssociationSalary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SalaryTypeDescriptor == input.SalaryTypeDescriptor ||
                    (this.SalaryTypeDescriptor != null &&
                    this.SalaryTypeDescriptor.Equals(input.SalaryTypeDescriptor))
                ) && 
                (
                    this.SalaryAmount == input.SalaryAmount ||
                    this.SalaryAmount.Equals(input.SalaryAmount)
                ) && 
                (
                    this.SalaryMaxRange == input.SalaryMaxRange ||
                    this.SalaryMaxRange.Equals(input.SalaryMaxRange)
                ) && 
                (
                    this.SalaryMinRange == input.SalaryMinRange ||
                    this.SalaryMinRange.Equals(input.SalaryMinRange)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SalaryTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.SalaryTypeDescriptor.GetHashCode();
                hashCode = hashCode * 59 + this.SalaryAmount.GetHashCode();
                hashCode = hashCode * 59 + this.SalaryMaxRange.GetHashCode();
                hashCode = hashCode * 59 + this.SalaryMinRange.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SalaryTypeDescriptor (string) maxLength
            if(this.SalaryTypeDescriptor != null && this.SalaryTypeDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SalaryTypeDescriptor, length must be less than 306.", new [] { "SalaryTypeDescriptor" });
            }

            yield break;
        }
    }

}
