/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.Roster.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.Roster.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmApplication
    /// </summary>
    [DataContract(Name = "tpdm_application")]
    public partial class TpdmApplication : IEquatable<TpdmApplication>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmApplication" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmApplication() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmApplication" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="applicationIdentifier">Identifier assigned to the application for a candidate or open staff position. (required).</param>
        /// <param name="applicantProfileReference">applicantProfileReference (required).</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference (required).</param>
        /// <param name="openStaffPositionReference">openStaffPositionReference.</param>
        /// <param name="academicSubjectDescriptor">The academic subject for which the application is made..</param>
        /// <param name="acceptedDate">The date of acceptance, if offered..</param>
        /// <param name="applicationDate">The month, day, and year the application was submitted. (required).</param>
        /// <param name="applicationSourceDescriptor">Specifies the source for the application (e.g., Job fair, website, referral)..</param>
        /// <param name="applicationStatusDescriptor">Indicates the current status of the application (e.g., received, phone screen, interview, awaiting decision, etc.). (required).</param>
        /// <param name="currentEmployee">Indicator as to whether the applicant is a current employee of the school district..</param>
        /// <param name="firstContactDate">Date applicant was first contacted after submitting application..</param>
        /// <param name="highNeedsAcademicSubjectDescriptor">The high need academic subject for the application, if any..</param>
        /// <param name="hireStatusDescriptor">Indicates the current status of the application for hire (e.g., applied, recommended, rejected, exited, offered, hired)..</param>
        /// <param name="hiringSourceDescriptor">The source for the application (e.g.,job fair, website, referral, etc.)..</param>
        /// <param name="recruitmentEventAttendances">An unordered collection of applicationRecruitmentEventAttendances. The recuitment event(s) associated with the Application..</param>
        /// <param name="scoreResults">An unordered collection of applicationScoreResults. A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc..</param>
        /// <param name="terms">An unordered collection of applicationTerms. The intended term of enrollment for which the application is being submitted..</param>
        /// <param name="withdrawDate">The date the application was withdrawn by the applicant..</param>
        /// <param name="withdrawReasonDescriptor">Reason applicant withdrew application..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmApplication(string id = default(string), string applicationIdentifier = default(string), TpdmApplicantProfileReference applicantProfileReference = default(TpdmApplicantProfileReference), EdFiEducationOrganizationReference educationOrganizationReference = default(EdFiEducationOrganizationReference), EdFiOpenStaffPositionReference openStaffPositionReference = default(EdFiOpenStaffPositionReference), string academicSubjectDescriptor = default(string), DateTime acceptedDate = default(DateTime), DateTime applicationDate = default(DateTime), string applicationSourceDescriptor = default(string), string applicationStatusDescriptor = default(string), bool currentEmployee = default(bool), DateTime firstContactDate = default(DateTime), string highNeedsAcademicSubjectDescriptor = default(string), string hireStatusDescriptor = default(string), string hiringSourceDescriptor = default(string), List<TpdmApplicationRecruitmentEventAttendance> recruitmentEventAttendances = default(List<TpdmApplicationRecruitmentEventAttendance>), List<TpdmApplicationScoreResult> scoreResults = default(List<TpdmApplicationScoreResult>), List<TpdmApplicationTerm> terms = default(List<TpdmApplicationTerm>), DateTime withdrawDate = default(DateTime), string withdrawReasonDescriptor = default(string), string etag = default(string))
        {
            // to ensure "applicationIdentifier" is required (not null)
            this.ApplicationIdentifier = applicationIdentifier ?? throw new ArgumentNullException("applicationIdentifier is a required property for TpdmApplication and cannot be null");
            // to ensure "applicantProfileReference" is required (not null)
            this.ApplicantProfileReference = applicantProfileReference ?? throw new ArgumentNullException("applicantProfileReference is a required property for TpdmApplication and cannot be null");
            // to ensure "educationOrganizationReference" is required (not null)
            this.EducationOrganizationReference = educationOrganizationReference ?? throw new ArgumentNullException("educationOrganizationReference is a required property for TpdmApplication and cannot be null");
            this.ApplicationDate = applicationDate;
            // to ensure "applicationStatusDescriptor" is required (not null)
            this.ApplicationStatusDescriptor = applicationStatusDescriptor ?? throw new ArgumentNullException("applicationStatusDescriptor is a required property for TpdmApplication and cannot be null");
            this.Id = id;
            this.OpenStaffPositionReference = openStaffPositionReference;
            this.AcademicSubjectDescriptor = academicSubjectDescriptor;
            this.AcceptedDate = acceptedDate;
            this.ApplicationSourceDescriptor = applicationSourceDescriptor;
            this.CurrentEmployee = currentEmployee;
            this.FirstContactDate = firstContactDate;
            this.HighNeedsAcademicSubjectDescriptor = highNeedsAcademicSubjectDescriptor;
            this.HireStatusDescriptor = hireStatusDescriptor;
            this.HiringSourceDescriptor = hiringSourceDescriptor;
            this.RecruitmentEventAttendances = recruitmentEventAttendances;
            this.ScoreResults = scoreResults;
            this.Terms = terms;
            this.WithdrawDate = withdrawDate;
            this.WithdrawReasonDescriptor = withdrawReasonDescriptor;
            this.Etag = etag;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Identifier assigned to the application for a candidate or open staff position.
        /// </summary>
        /// <value>Identifier assigned to the application for a candidate or open staff position.</value>
        [DataMember(Name = "applicationIdentifier", IsRequired = true, EmitDefaultValue = false)]
        public string ApplicationIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets ApplicantProfileReference
        /// </summary>
        [DataMember(Name = "applicantProfileReference", IsRequired = true, EmitDefaultValue = false)]
        public TpdmApplicantProfileReference ApplicantProfileReference { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name = "educationOrganizationReference", IsRequired = true, EmitDefaultValue = false)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets OpenStaffPositionReference
        /// </summary>
        [DataMember(Name = "openStaffPositionReference", EmitDefaultValue = false)]
        public EdFiOpenStaffPositionReference OpenStaffPositionReference { get; set; }

        /// <summary>
        /// The academic subject for which the application is made.
        /// </summary>
        /// <value>The academic subject for which the application is made.</value>
        [DataMember(Name = "academicSubjectDescriptor", EmitDefaultValue = false)]
        public string AcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// The date of acceptance, if offered.
        /// </summary>
        /// <value>The date of acceptance, if offered.</value>
        [DataMember(Name = "acceptedDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime AcceptedDate { get; set; }

        /// <summary>
        /// The month, day, and year the application was submitted.
        /// </summary>
        /// <value>The month, day, and year the application was submitted.</value>
        [DataMember(Name = "applicationDate", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime ApplicationDate { get; set; }

        /// <summary>
        /// Specifies the source for the application (e.g., Job fair, website, referral).
        /// </summary>
        /// <value>Specifies the source for the application (e.g., Job fair, website, referral).</value>
        [DataMember(Name = "applicationSourceDescriptor", EmitDefaultValue = false)]
        public string ApplicationSourceDescriptor { get; set; }

        /// <summary>
        /// Indicates the current status of the application (e.g., received, phone screen, interview, awaiting decision, etc.).
        /// </summary>
        /// <value>Indicates the current status of the application (e.g., received, phone screen, interview, awaiting decision, etc.).</value>
        [DataMember(Name = "applicationStatusDescriptor", IsRequired = true, EmitDefaultValue = false)]
        public string ApplicationStatusDescriptor { get; set; }

        /// <summary>
        /// Indicator as to whether the applicant is a current employee of the school district.
        /// </summary>
        /// <value>Indicator as to whether the applicant is a current employee of the school district.</value>
        [DataMember(Name = "currentEmployee", EmitDefaultValue = true)]
        public bool CurrentEmployee { get; set; }

        /// <summary>
        /// Date applicant was first contacted after submitting application.
        /// </summary>
        /// <value>Date applicant was first contacted after submitting application.</value>
        [DataMember(Name = "firstContactDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime FirstContactDate { get; set; }

        /// <summary>
        /// The high need academic subject for the application, if any.
        /// </summary>
        /// <value>The high need academic subject for the application, if any.</value>
        [DataMember(Name = "highNeedsAcademicSubjectDescriptor", EmitDefaultValue = false)]
        public string HighNeedsAcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// Indicates the current status of the application for hire (e.g., applied, recommended, rejected, exited, offered, hired).
        /// </summary>
        /// <value>Indicates the current status of the application for hire (e.g., applied, recommended, rejected, exited, offered, hired).</value>
        [DataMember(Name = "hireStatusDescriptor", EmitDefaultValue = false)]
        public string HireStatusDescriptor { get; set; }

        /// <summary>
        /// The source for the application (e.g.,job fair, website, referral, etc.).
        /// </summary>
        /// <value>The source for the application (e.g.,job fair, website, referral, etc.).</value>
        [DataMember(Name = "hiringSourceDescriptor", EmitDefaultValue = false)]
        public string HiringSourceDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of applicationRecruitmentEventAttendances. The recuitment event(s) associated with the Application.
        /// </summary>
        /// <value>An unordered collection of applicationRecruitmentEventAttendances. The recuitment event(s) associated with the Application.</value>
        [DataMember(Name = "recruitmentEventAttendances", EmitDefaultValue = false)]
        public List<TpdmApplicationRecruitmentEventAttendance> RecruitmentEventAttendances { get; set; }

        /// <summary>
        /// An unordered collection of applicationScoreResults. A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.
        /// </summary>
        /// <value>An unordered collection of applicationScoreResults. A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.</value>
        [DataMember(Name = "scoreResults", EmitDefaultValue = false)]
        public List<TpdmApplicationScoreResult> ScoreResults { get; set; }

        /// <summary>
        /// An unordered collection of applicationTerms. The intended term of enrollment for which the application is being submitted.
        /// </summary>
        /// <value>An unordered collection of applicationTerms. The intended term of enrollment for which the application is being submitted.</value>
        [DataMember(Name = "terms", EmitDefaultValue = false)]
        public List<TpdmApplicationTerm> Terms { get; set; }

        /// <summary>
        /// The date the application was withdrawn by the applicant.
        /// </summary>
        /// <value>The date the application was withdrawn by the applicant.</value>
        [DataMember(Name = "withdrawDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime WithdrawDate { get; set; }

        /// <summary>
        /// Reason applicant withdrew application.
        /// </summary>
        /// <value>Reason applicant withdrew application.</value>
        [DataMember(Name = "withdrawReasonDescriptor", EmitDefaultValue = false)]
        public string WithdrawReasonDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmApplication {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ApplicationIdentifier: ").Append(ApplicationIdentifier).Append("\n");
            sb.Append("  ApplicantProfileReference: ").Append(ApplicantProfileReference).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  OpenStaffPositionReference: ").Append(OpenStaffPositionReference).Append("\n");
            sb.Append("  AcademicSubjectDescriptor: ").Append(AcademicSubjectDescriptor).Append("\n");
            sb.Append("  AcceptedDate: ").Append(AcceptedDate).Append("\n");
            sb.Append("  ApplicationDate: ").Append(ApplicationDate).Append("\n");
            sb.Append("  ApplicationSourceDescriptor: ").Append(ApplicationSourceDescriptor).Append("\n");
            sb.Append("  ApplicationStatusDescriptor: ").Append(ApplicationStatusDescriptor).Append("\n");
            sb.Append("  CurrentEmployee: ").Append(CurrentEmployee).Append("\n");
            sb.Append("  FirstContactDate: ").Append(FirstContactDate).Append("\n");
            sb.Append("  HighNeedsAcademicSubjectDescriptor: ").Append(HighNeedsAcademicSubjectDescriptor).Append("\n");
            sb.Append("  HireStatusDescriptor: ").Append(HireStatusDescriptor).Append("\n");
            sb.Append("  HiringSourceDescriptor: ").Append(HiringSourceDescriptor).Append("\n");
            sb.Append("  RecruitmentEventAttendances: ").Append(RecruitmentEventAttendances).Append("\n");
            sb.Append("  ScoreResults: ").Append(ScoreResults).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  WithdrawDate: ").Append(WithdrawDate).Append("\n");
            sb.Append("  WithdrawReasonDescriptor: ").Append(WithdrawReasonDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmApplication);
        }

        /// <summary>
        /// Returns true if TpdmApplication instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmApplication to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmApplication input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ApplicationIdentifier == input.ApplicationIdentifier ||
                    (this.ApplicationIdentifier != null &&
                    this.ApplicationIdentifier.Equals(input.ApplicationIdentifier))
                ) && 
                (
                    this.ApplicantProfileReference == input.ApplicantProfileReference ||
                    (this.ApplicantProfileReference != null &&
                    this.ApplicantProfileReference.Equals(input.ApplicantProfileReference))
                ) && 
                (
                    this.EducationOrganizationReference == input.EducationOrganizationReference ||
                    (this.EducationOrganizationReference != null &&
                    this.EducationOrganizationReference.Equals(input.EducationOrganizationReference))
                ) && 
                (
                    this.OpenStaffPositionReference == input.OpenStaffPositionReference ||
                    (this.OpenStaffPositionReference != null &&
                    this.OpenStaffPositionReference.Equals(input.OpenStaffPositionReference))
                ) && 
                (
                    this.AcademicSubjectDescriptor == input.AcademicSubjectDescriptor ||
                    (this.AcademicSubjectDescriptor != null &&
                    this.AcademicSubjectDescriptor.Equals(input.AcademicSubjectDescriptor))
                ) && 
                (
                    this.AcceptedDate == input.AcceptedDate ||
                    (this.AcceptedDate != null &&
                    this.AcceptedDate.Equals(input.AcceptedDate))
                ) && 
                (
                    this.ApplicationDate == input.ApplicationDate ||
                    (this.ApplicationDate != null &&
                    this.ApplicationDate.Equals(input.ApplicationDate))
                ) && 
                (
                    this.ApplicationSourceDescriptor == input.ApplicationSourceDescriptor ||
                    (this.ApplicationSourceDescriptor != null &&
                    this.ApplicationSourceDescriptor.Equals(input.ApplicationSourceDescriptor))
                ) && 
                (
                    this.ApplicationStatusDescriptor == input.ApplicationStatusDescriptor ||
                    (this.ApplicationStatusDescriptor != null &&
                    this.ApplicationStatusDescriptor.Equals(input.ApplicationStatusDescriptor))
                ) && 
                (
                    this.CurrentEmployee == input.CurrentEmployee ||
                    this.CurrentEmployee.Equals(input.CurrentEmployee)
                ) && 
                (
                    this.FirstContactDate == input.FirstContactDate ||
                    (this.FirstContactDate != null &&
                    this.FirstContactDate.Equals(input.FirstContactDate))
                ) && 
                (
                    this.HighNeedsAcademicSubjectDescriptor == input.HighNeedsAcademicSubjectDescriptor ||
                    (this.HighNeedsAcademicSubjectDescriptor != null &&
                    this.HighNeedsAcademicSubjectDescriptor.Equals(input.HighNeedsAcademicSubjectDescriptor))
                ) && 
                (
                    this.HireStatusDescriptor == input.HireStatusDescriptor ||
                    (this.HireStatusDescriptor != null &&
                    this.HireStatusDescriptor.Equals(input.HireStatusDescriptor))
                ) && 
                (
                    this.HiringSourceDescriptor == input.HiringSourceDescriptor ||
                    (this.HiringSourceDescriptor != null &&
                    this.HiringSourceDescriptor.Equals(input.HiringSourceDescriptor))
                ) && 
                (
                    this.RecruitmentEventAttendances == input.RecruitmentEventAttendances ||
                    this.RecruitmentEventAttendances != null &&
                    input.RecruitmentEventAttendances != null &&
                    this.RecruitmentEventAttendances.SequenceEqual(input.RecruitmentEventAttendances)
                ) && 
                (
                    this.ScoreResults == input.ScoreResults ||
                    this.ScoreResults != null &&
                    input.ScoreResults != null &&
                    this.ScoreResults.SequenceEqual(input.ScoreResults)
                ) && 
                (
                    this.Terms == input.Terms ||
                    this.Terms != null &&
                    input.Terms != null &&
                    this.Terms.SequenceEqual(input.Terms)
                ) && 
                (
                    this.WithdrawDate == input.WithdrawDate ||
                    (this.WithdrawDate != null &&
                    this.WithdrawDate.Equals(input.WithdrawDate))
                ) && 
                (
                    this.WithdrawReasonDescriptor == input.WithdrawReasonDescriptor ||
                    (this.WithdrawReasonDescriptor != null &&
                    this.WithdrawReasonDescriptor.Equals(input.WithdrawReasonDescriptor))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ApplicationIdentifier != null)
                    hashCode = hashCode * 59 + this.ApplicationIdentifier.GetHashCode();
                if (this.ApplicantProfileReference != null)
                    hashCode = hashCode * 59 + this.ApplicantProfileReference.GetHashCode();
                if (this.EducationOrganizationReference != null)
                    hashCode = hashCode * 59 + this.EducationOrganizationReference.GetHashCode();
                if (this.OpenStaffPositionReference != null)
                    hashCode = hashCode * 59 + this.OpenStaffPositionReference.GetHashCode();
                if (this.AcademicSubjectDescriptor != null)
                    hashCode = hashCode * 59 + this.AcademicSubjectDescriptor.GetHashCode();
                if (this.AcceptedDate != null)
                    hashCode = hashCode * 59 + this.AcceptedDate.GetHashCode();
                if (this.ApplicationDate != null)
                    hashCode = hashCode * 59 + this.ApplicationDate.GetHashCode();
                if (this.ApplicationSourceDescriptor != null)
                    hashCode = hashCode * 59 + this.ApplicationSourceDescriptor.GetHashCode();
                if (this.ApplicationStatusDescriptor != null)
                    hashCode = hashCode * 59 + this.ApplicationStatusDescriptor.GetHashCode();
                hashCode = hashCode * 59 + this.CurrentEmployee.GetHashCode();
                if (this.FirstContactDate != null)
                    hashCode = hashCode * 59 + this.FirstContactDate.GetHashCode();
                if (this.HighNeedsAcademicSubjectDescriptor != null)
                    hashCode = hashCode * 59 + this.HighNeedsAcademicSubjectDescriptor.GetHashCode();
                if (this.HireStatusDescriptor != null)
                    hashCode = hashCode * 59 + this.HireStatusDescriptor.GetHashCode();
                if (this.HiringSourceDescriptor != null)
                    hashCode = hashCode * 59 + this.HiringSourceDescriptor.GetHashCode();
                if (this.RecruitmentEventAttendances != null)
                    hashCode = hashCode * 59 + this.RecruitmentEventAttendances.GetHashCode();
                if (this.ScoreResults != null)
                    hashCode = hashCode * 59 + this.ScoreResults.GetHashCode();
                if (this.Terms != null)
                    hashCode = hashCode * 59 + this.Terms.GetHashCode();
                if (this.WithdrawDate != null)
                    hashCode = hashCode * 59 + this.WithdrawDate.GetHashCode();
                if (this.WithdrawReasonDescriptor != null)
                    hashCode = hashCode * 59 + this.WithdrawReasonDescriptor.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ApplicationIdentifier (string) maxLength
            if(this.ApplicationIdentifier != null && this.ApplicationIdentifier.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ApplicationIdentifier, length must be less than 20.", new [] { "ApplicationIdentifier" });
            }

            // AcademicSubjectDescriptor (string) maxLength
            if(this.AcademicSubjectDescriptor != null && this.AcademicSubjectDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AcademicSubjectDescriptor, length must be less than 306.", new [] { "AcademicSubjectDescriptor" });
            }

            // ApplicationSourceDescriptor (string) maxLength
            if(this.ApplicationSourceDescriptor != null && this.ApplicationSourceDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ApplicationSourceDescriptor, length must be less than 306.", new [] { "ApplicationSourceDescriptor" });
            }

            // ApplicationStatusDescriptor (string) maxLength
            if(this.ApplicationStatusDescriptor != null && this.ApplicationStatusDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ApplicationStatusDescriptor, length must be less than 306.", new [] { "ApplicationStatusDescriptor" });
            }

            // HighNeedsAcademicSubjectDescriptor (string) maxLength
            if(this.HighNeedsAcademicSubjectDescriptor != null && this.HighNeedsAcademicSubjectDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HighNeedsAcademicSubjectDescriptor, length must be less than 306.", new [] { "HighNeedsAcademicSubjectDescriptor" });
            }

            // HireStatusDescriptor (string) maxLength
            if(this.HireStatusDescriptor != null && this.HireStatusDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HireStatusDescriptor, length must be less than 306.", new [] { "HireStatusDescriptor" });
            }

            // HiringSourceDescriptor (string) maxLength
            if(this.HiringSourceDescriptor != null && this.HiringSourceDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HiringSourceDescriptor, length must be less than 306.", new [] { "HiringSourceDescriptor" });
            }

            // WithdrawReasonDescriptor (string) maxLength
            if(this.WithdrawReasonDescriptor != null && this.WithdrawReasonDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WithdrawReasonDescriptor, length must be less than 306.", new [] { "WithdrawReasonDescriptor" });
            }

            yield break;
        }
    }

}
