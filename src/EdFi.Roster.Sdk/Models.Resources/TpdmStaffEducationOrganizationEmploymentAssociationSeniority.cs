/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.Roster.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.Roster.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmStaffEducationOrganizationEmploymentAssociationSeniority
    /// </summary>
    [DataContract(Name = "tpdm_staffEducationOrganizationEmploymentAssociationSeniority")]
    public partial class TpdmStaffEducationOrganizationEmploymentAssociationSeniority : IEquatable<TpdmStaffEducationOrganizationEmploymentAssociationSeniority>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmStaffEducationOrganizationEmploymentAssociationSeniority" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmStaffEducationOrganizationEmploymentAssociationSeniority() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmStaffEducationOrganizationEmploymentAssociationSeniority" /> class.
        /// </summary>
        /// <param name="credentialFieldDescriptor">The field of the credential being applied. (required).</param>
        /// <param name="nameOfInstitution">The name of the education organization worked. (required).</param>
        /// <param name="yearsExperience">The number of years of experience. (required).</param>
        public TpdmStaffEducationOrganizationEmploymentAssociationSeniority(string credentialFieldDescriptor = default(string), string nameOfInstitution = default(string), double yearsExperience = default(double))
        {
            // to ensure "credentialFieldDescriptor" is required (not null)
            this.CredentialFieldDescriptor = credentialFieldDescriptor ?? throw new ArgumentNullException("credentialFieldDescriptor is a required property for TpdmStaffEducationOrganizationEmploymentAssociationSeniority and cannot be null");
            // to ensure "nameOfInstitution" is required (not null)
            this.NameOfInstitution = nameOfInstitution ?? throw new ArgumentNullException("nameOfInstitution is a required property for TpdmStaffEducationOrganizationEmploymentAssociationSeniority and cannot be null");
            this.YearsExperience = yearsExperience;
        }

        /// <summary>
        /// The field of the credential being applied.
        /// </summary>
        /// <value>The field of the credential being applied.</value>
        [DataMember(Name = "credentialFieldDescriptor", IsRequired = true, EmitDefaultValue = false)]
        public string CredentialFieldDescriptor { get; set; }

        /// <summary>
        /// The name of the education organization worked.
        /// </summary>
        /// <value>The name of the education organization worked.</value>
        [DataMember(Name = "nameOfInstitution", IsRequired = true, EmitDefaultValue = false)]
        public string NameOfInstitution { get; set; }

        /// <summary>
        /// The number of years of experience.
        /// </summary>
        /// <value>The number of years of experience.</value>
        [DataMember(Name = "yearsExperience", IsRequired = true, EmitDefaultValue = false)]
        public double YearsExperience { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmStaffEducationOrganizationEmploymentAssociationSeniority {\n");
            sb.Append("  CredentialFieldDescriptor: ").Append(CredentialFieldDescriptor).Append("\n");
            sb.Append("  NameOfInstitution: ").Append(NameOfInstitution).Append("\n");
            sb.Append("  YearsExperience: ").Append(YearsExperience).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmStaffEducationOrganizationEmploymentAssociationSeniority);
        }

        /// <summary>
        /// Returns true if TpdmStaffEducationOrganizationEmploymentAssociationSeniority instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmStaffEducationOrganizationEmploymentAssociationSeniority to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmStaffEducationOrganizationEmploymentAssociationSeniority input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CredentialFieldDescriptor == input.CredentialFieldDescriptor ||
                    (this.CredentialFieldDescriptor != null &&
                    this.CredentialFieldDescriptor.Equals(input.CredentialFieldDescriptor))
                ) && 
                (
                    this.NameOfInstitution == input.NameOfInstitution ||
                    (this.NameOfInstitution != null &&
                    this.NameOfInstitution.Equals(input.NameOfInstitution))
                ) && 
                (
                    this.YearsExperience == input.YearsExperience ||
                    this.YearsExperience.Equals(input.YearsExperience)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CredentialFieldDescriptor != null)
                    hashCode = hashCode * 59 + this.CredentialFieldDescriptor.GetHashCode();
                if (this.NameOfInstitution != null)
                    hashCode = hashCode * 59 + this.NameOfInstitution.GetHashCode();
                hashCode = hashCode * 59 + this.YearsExperience.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CredentialFieldDescriptor (string) maxLength
            if(this.CredentialFieldDescriptor != null && this.CredentialFieldDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CredentialFieldDescriptor, length must be less than 306.", new [] { "CredentialFieldDescriptor" });
            }

            // NameOfInstitution (string) maxLength
            if(this.NameOfInstitution != null && this.NameOfInstitution.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NameOfInstitution, length must be less than 75.", new [] { "NameOfInstitution" });
            }

            yield break;
        }
    }

}
