/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.Roster.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.Roster.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmRecruitmentEventAttendanceCurrentPosition
    /// </summary>
    [DataContract(Name = "tpdm_recruitmentEventAttendanceCurrentPosition")]
    public partial class TpdmRecruitmentEventAttendanceCurrentPosition : IEquatable<TpdmRecruitmentEventAttendanceCurrentPosition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmRecruitmentEventAttendanceCurrentPosition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmRecruitmentEventAttendanceCurrentPosition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmRecruitmentEventAttendanceCurrentPosition" /> class.
        /// </summary>
        /// <param name="academicSubjectDescriptor">The academic subject the staff person&#39;s assignment to a school..</param>
        /// <param name="location">The location, typically City and State, for the institution. (required).</param>
        /// <param name="nameOfInstitution">The formal name of the education organization. (required).</param>
        /// <param name="positionTitle">The descriptive name of an individual&#39;s position. (required).</param>
        /// <param name="gradeLevels">An unordered collection of recruitmentEventAttendanceCurrentPositionGradeLevels. The set of grade levels for which the individual&#39;s assignment is responsible..</param>
        public TpdmRecruitmentEventAttendanceCurrentPosition(string academicSubjectDescriptor = default(string), string location = default(string), string nameOfInstitution = default(string), string positionTitle = default(string), List<TpdmRecruitmentEventAttendanceCurrentPositionGradeLevel> gradeLevels = default(List<TpdmRecruitmentEventAttendanceCurrentPositionGradeLevel>))
        {
            // to ensure "location" is required (not null)
            this.Location = location ?? throw new ArgumentNullException("location is a required property for TpdmRecruitmentEventAttendanceCurrentPosition and cannot be null");
            // to ensure "nameOfInstitution" is required (not null)
            this.NameOfInstitution = nameOfInstitution ?? throw new ArgumentNullException("nameOfInstitution is a required property for TpdmRecruitmentEventAttendanceCurrentPosition and cannot be null");
            // to ensure "positionTitle" is required (not null)
            this.PositionTitle = positionTitle ?? throw new ArgumentNullException("positionTitle is a required property for TpdmRecruitmentEventAttendanceCurrentPosition and cannot be null");
            this.AcademicSubjectDescriptor = academicSubjectDescriptor;
            this.GradeLevels = gradeLevels;
        }

        /// <summary>
        /// The academic subject the staff person&#39;s assignment to a school.
        /// </summary>
        /// <value>The academic subject the staff person&#39;s assignment to a school.</value>
        [DataMember(Name = "academicSubjectDescriptor", EmitDefaultValue = false)]
        public string AcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// The location, typically City and State, for the institution.
        /// </summary>
        /// <value>The location, typically City and State, for the institution.</value>
        [DataMember(Name = "location", IsRequired = true, EmitDefaultValue = false)]
        public string Location { get; set; }

        /// <summary>
        /// The formal name of the education organization.
        /// </summary>
        /// <value>The formal name of the education organization.</value>
        [DataMember(Name = "nameOfInstitution", IsRequired = true, EmitDefaultValue = false)]
        public string NameOfInstitution { get; set; }

        /// <summary>
        /// The descriptive name of an individual&#39;s position.
        /// </summary>
        /// <value>The descriptive name of an individual&#39;s position.</value>
        [DataMember(Name = "positionTitle", IsRequired = true, EmitDefaultValue = false)]
        public string PositionTitle { get; set; }

        /// <summary>
        /// An unordered collection of recruitmentEventAttendanceCurrentPositionGradeLevels. The set of grade levels for which the individual&#39;s assignment is responsible.
        /// </summary>
        /// <value>An unordered collection of recruitmentEventAttendanceCurrentPositionGradeLevels. The set of grade levels for which the individual&#39;s assignment is responsible.</value>
        [DataMember(Name = "gradeLevels", EmitDefaultValue = false)]
        public List<TpdmRecruitmentEventAttendanceCurrentPositionGradeLevel> GradeLevels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmRecruitmentEventAttendanceCurrentPosition {\n");
            sb.Append("  AcademicSubjectDescriptor: ").Append(AcademicSubjectDescriptor).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  NameOfInstitution: ").Append(NameOfInstitution).Append("\n");
            sb.Append("  PositionTitle: ").Append(PositionTitle).Append("\n");
            sb.Append("  GradeLevels: ").Append(GradeLevels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmRecruitmentEventAttendanceCurrentPosition);
        }

        /// <summary>
        /// Returns true if TpdmRecruitmentEventAttendanceCurrentPosition instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmRecruitmentEventAttendanceCurrentPosition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmRecruitmentEventAttendanceCurrentPosition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AcademicSubjectDescriptor == input.AcademicSubjectDescriptor ||
                    (this.AcademicSubjectDescriptor != null &&
                    this.AcademicSubjectDescriptor.Equals(input.AcademicSubjectDescriptor))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.NameOfInstitution == input.NameOfInstitution ||
                    (this.NameOfInstitution != null &&
                    this.NameOfInstitution.Equals(input.NameOfInstitution))
                ) && 
                (
                    this.PositionTitle == input.PositionTitle ||
                    (this.PositionTitle != null &&
                    this.PositionTitle.Equals(input.PositionTitle))
                ) && 
                (
                    this.GradeLevels == input.GradeLevels ||
                    this.GradeLevels != null &&
                    input.GradeLevels != null &&
                    this.GradeLevels.SequenceEqual(input.GradeLevels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AcademicSubjectDescriptor != null)
                    hashCode = hashCode * 59 + this.AcademicSubjectDescriptor.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.NameOfInstitution != null)
                    hashCode = hashCode * 59 + this.NameOfInstitution.GetHashCode();
                if (this.PositionTitle != null)
                    hashCode = hashCode * 59 + this.PositionTitle.GetHashCode();
                if (this.GradeLevels != null)
                    hashCode = hashCode * 59 + this.GradeLevels.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AcademicSubjectDescriptor (string) maxLength
            if(this.AcademicSubjectDescriptor != null && this.AcademicSubjectDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AcademicSubjectDescriptor, length must be less than 306.", new [] { "AcademicSubjectDescriptor" });
            }

            // Location (string) maxLength
            if(this.Location != null && this.Location.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Location, length must be less than 75.", new [] { "Location" });
            }

            // NameOfInstitution (string) maxLength
            if(this.NameOfInstitution != null && this.NameOfInstitution.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NameOfInstitution, length must be less than 75.", new [] { "NameOfInstitution" });
            }

            // PositionTitle (string) maxLength
            if(this.PositionTitle != null && this.PositionTitle.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PositionTitle, length must be less than 100.", new [] { "PositionTitle" });
            }

            yield break;
        }
    }

}
