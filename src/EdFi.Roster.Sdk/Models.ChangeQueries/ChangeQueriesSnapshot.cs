/*
 * Available Change Versions API Endpoint
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.Roster.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.Roster.Sdk.Models.ChangeQueries
{
    /// <summary>
    /// ChangeQueriesSnapshot
    /// </summary>
    [DataContract(Name = "changeQueries_snapshot")]
    public partial class ChangeQueriesSnapshot : IEquatable<ChangeQueriesSnapshot>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeQueriesSnapshot" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChangeQueriesSnapshot() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeQueriesSnapshot" /> class.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource..</param>
        /// <param name="snapshotIdentifier">The unique identifier of the snapshot to be passed in the &#39;Snapshot-Identifier&#39; custom header by the API client on subsequent GET requests. (required).</param>
        /// <param name="snapshotDateTime">The date and time the snapshot was created. (required).</param>
        public ChangeQueriesSnapshot(string id = default(string), string snapshotIdentifier = default(string), DateTime snapshotDateTime = default(DateTime))
        {
            // to ensure "snapshotIdentifier" is required (not null)
            this.SnapshotIdentifier = snapshotIdentifier ?? throw new ArgumentNullException("snapshotIdentifier is a required property for ChangeQueriesSnapshot and cannot be null");
            this.SnapshotDateTime = snapshotDateTime;
            this.Id = id;
        }

        /// <summary>
        /// A resource identifier that uniquely identifies the resource.
        /// </summary>
        /// <value>A resource identifier that uniquely identifies the resource.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier of the snapshot to be passed in the &#39;Snapshot-Identifier&#39; custom header by the API client on subsequent GET requests.
        /// </summary>
        /// <value>The unique identifier of the snapshot to be passed in the &#39;Snapshot-Identifier&#39; custom header by the API client on subsequent GET requests.</value>
        [DataMember(Name = "snapshotIdentifier", IsRequired = true, EmitDefaultValue = false)]
        public string SnapshotIdentifier { get; set; }

        /// <summary>
        /// The date and time the snapshot was created.
        /// </summary>
        /// <value>The date and time the snapshot was created.</value>
        [DataMember(Name = "snapshotDateTime", IsRequired = true, EmitDefaultValue = false)]
        public DateTime SnapshotDateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChangeQueriesSnapshot {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SnapshotIdentifier: ").Append(SnapshotIdentifier).Append("\n");
            sb.Append("  SnapshotDateTime: ").Append(SnapshotDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChangeQueriesSnapshot);
        }

        /// <summary>
        /// Returns true if ChangeQueriesSnapshot instances are equal
        /// </summary>
        /// <param name="input">Instance of ChangeQueriesSnapshot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChangeQueriesSnapshot input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SnapshotIdentifier == input.SnapshotIdentifier ||
                    (this.SnapshotIdentifier != null &&
                    this.SnapshotIdentifier.Equals(input.SnapshotIdentifier))
                ) && 
                (
                    this.SnapshotDateTime == input.SnapshotDateTime ||
                    (this.SnapshotDateTime != null &&
                    this.SnapshotDateTime.Equals(input.SnapshotDateTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.SnapshotIdentifier != null)
                    hashCode = hashCode * 59 + this.SnapshotIdentifier.GetHashCode();
                if (this.SnapshotDateTime != null)
                    hashCode = hashCode * 59 + this.SnapshotDateTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SnapshotIdentifier (string) maxLength
            if(this.SnapshotIdentifier != null && this.SnapshotIdentifier.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SnapshotIdentifier, length must be less than 32.", new [] { "SnapshotIdentifier" });
            }

            yield break;
        }
    }

}
