/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.Roster.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.Roster.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmRecruitmentEventAttendanceTouchpoint
    /// </summary>
    [DataContract(Name = "tpdm_recruitmentEventAttendanceTouchpoint")]
    public partial class TpdmRecruitmentEventAttendanceTouchpoint : IEquatable<TpdmRecruitmentEventAttendanceTouchpoint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmRecruitmentEventAttendanceTouchpoint" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmRecruitmentEventAttendanceTouchpoint() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmRecruitmentEventAttendanceTouchpoint" /> class.
        /// </summary>
        /// <param name="touchpointContent">The content associated with or an artifact from the touchpoint. (required).</param>
        /// <param name="touchpointDate">The date of the touchpoint. (required).</param>
        public TpdmRecruitmentEventAttendanceTouchpoint(string touchpointContent = default(string), DateTime touchpointDate = default(DateTime))
        {
            // to ensure "touchpointContent" is required (not null)
            this.TouchpointContent = touchpointContent ?? throw new ArgumentNullException("touchpointContent is a required property for TpdmRecruitmentEventAttendanceTouchpoint and cannot be null");
            this.TouchpointDate = touchpointDate;
        }

        /// <summary>
        /// The content associated with or an artifact from the touchpoint.
        /// </summary>
        /// <value>The content associated with or an artifact from the touchpoint.</value>
        [DataMember(Name = "touchpointContent", IsRequired = true, EmitDefaultValue = false)]
        public string TouchpointContent { get; set; }

        /// <summary>
        /// The date of the touchpoint.
        /// </summary>
        /// <value>The date of the touchpoint.</value>
        [DataMember(Name = "touchpointDate", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime TouchpointDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmRecruitmentEventAttendanceTouchpoint {\n");
            sb.Append("  TouchpointContent: ").Append(TouchpointContent).Append("\n");
            sb.Append("  TouchpointDate: ").Append(TouchpointDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmRecruitmentEventAttendanceTouchpoint);
        }

        /// <summary>
        /// Returns true if TpdmRecruitmentEventAttendanceTouchpoint instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmRecruitmentEventAttendanceTouchpoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmRecruitmentEventAttendanceTouchpoint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TouchpointContent == input.TouchpointContent ||
                    (this.TouchpointContent != null &&
                    this.TouchpointContent.Equals(input.TouchpointContent))
                ) && 
                (
                    this.TouchpointDate == input.TouchpointDate ||
                    (this.TouchpointDate != null &&
                    this.TouchpointDate.Equals(input.TouchpointDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TouchpointContent != null)
                    hashCode = hashCode * 59 + this.TouchpointContent.GetHashCode();
                if (this.TouchpointDate != null)
                    hashCode = hashCode * 59 + this.TouchpointDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TouchpointContent (string) maxLength
            if(this.TouchpointContent != null && this.TouchpointContent.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TouchpointContent, length must be less than 255.", new [] { "TouchpointContent" });
            }

            yield break;
        }
    }

}
