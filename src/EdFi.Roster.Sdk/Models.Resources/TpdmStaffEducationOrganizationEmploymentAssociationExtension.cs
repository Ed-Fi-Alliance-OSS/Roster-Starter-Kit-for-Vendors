/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.Roster.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.Roster.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmStaffEducationOrganizationEmploymentAssociationExtension
    /// </summary>
    [DataContract(Name = "tpdm_staffEducationOrganizationEmploymentAssociationExtension")]
    public partial class TpdmStaffEducationOrganizationEmploymentAssociationExtension : IEquatable<TpdmStaffEducationOrganizationEmploymentAssociationExtension>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmStaffEducationOrganizationEmploymentAssociationExtension" /> class.
        /// </summary>
        /// <param name="lengthOfContractDescriptor">The length of contract (e.g., 12 month, 9 month, summer)..</param>
        /// <param name="probationCompleteDate">The date the probation period ended or is scheduled to end..</param>
        /// <param name="tenured">Indicator of whether the staff member is tenured..</param>
        /// <param name="tenureTrack">An indication that the staff is on track for tenure..</param>
        /// <param name="backgroundChecks">An unordered collection of staffEducationOrganizationEmploymentAssociationBackgroundChecks. Staff background check history and disposition..</param>
        /// <param name="seniorities">An unordered collection of staffEducationOrganizationEmploymentAssociationSeniorities. Entries of job experience contributing to computations of seniority..</param>
        /// <param name="salary">salary.</param>
        public TpdmStaffEducationOrganizationEmploymentAssociationExtension(string lengthOfContractDescriptor = default(string), DateTime probationCompleteDate = default(DateTime), bool tenured = default(bool), bool tenureTrack = default(bool), List<TpdmStaffEducationOrganizationEmploymentAssociationBackgroundCheck> backgroundChecks = default(List<TpdmStaffEducationOrganizationEmploymentAssociationBackgroundCheck>), List<TpdmStaffEducationOrganizationEmploymentAssociationSeniority> seniorities = default(List<TpdmStaffEducationOrganizationEmploymentAssociationSeniority>), TpdmStaffEducationOrganizationEmploymentAssociationSalary salary = default(TpdmStaffEducationOrganizationEmploymentAssociationSalary))
        {
            this.LengthOfContractDescriptor = lengthOfContractDescriptor;
            this.ProbationCompleteDate = probationCompleteDate;
            this.Tenured = tenured;
            this.TenureTrack = tenureTrack;
            this.BackgroundChecks = backgroundChecks;
            this.Seniorities = seniorities;
            this.Salary = salary;
        }

        /// <summary>
        /// The length of contract (e.g., 12 month, 9 month, summer).
        /// </summary>
        /// <value>The length of contract (e.g., 12 month, 9 month, summer).</value>
        [DataMember(Name = "lengthOfContractDescriptor", EmitDefaultValue = false)]
        public string LengthOfContractDescriptor { get; set; }

        /// <summary>
        /// The date the probation period ended or is scheduled to end.
        /// </summary>
        /// <value>The date the probation period ended or is scheduled to end.</value>
        [DataMember(Name = "probationCompleteDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime ProbationCompleteDate { get; set; }

        /// <summary>
        /// Indicator of whether the staff member is tenured.
        /// </summary>
        /// <value>Indicator of whether the staff member is tenured.</value>
        [DataMember(Name = "tenured", EmitDefaultValue = true)]
        public bool Tenured { get; set; }

        /// <summary>
        /// An indication that the staff is on track for tenure.
        /// </summary>
        /// <value>An indication that the staff is on track for tenure.</value>
        [DataMember(Name = "tenureTrack", EmitDefaultValue = true)]
        public bool TenureTrack { get; set; }

        /// <summary>
        /// An unordered collection of staffEducationOrganizationEmploymentAssociationBackgroundChecks. Staff background check history and disposition.
        /// </summary>
        /// <value>An unordered collection of staffEducationOrganizationEmploymentAssociationBackgroundChecks. Staff background check history and disposition.</value>
        [DataMember(Name = "backgroundChecks", EmitDefaultValue = false)]
        public List<TpdmStaffEducationOrganizationEmploymentAssociationBackgroundCheck> BackgroundChecks { get; set; }

        /// <summary>
        /// An unordered collection of staffEducationOrganizationEmploymentAssociationSeniorities. Entries of job experience contributing to computations of seniority.
        /// </summary>
        /// <value>An unordered collection of staffEducationOrganizationEmploymentAssociationSeniorities. Entries of job experience contributing to computations of seniority.</value>
        [DataMember(Name = "seniorities", EmitDefaultValue = false)]
        public List<TpdmStaffEducationOrganizationEmploymentAssociationSeniority> Seniorities { get; set; }

        /// <summary>
        /// Gets or Sets Salary
        /// </summary>
        [DataMember(Name = "salary", EmitDefaultValue = false)]
        public TpdmStaffEducationOrganizationEmploymentAssociationSalary Salary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmStaffEducationOrganizationEmploymentAssociationExtension {\n");
            sb.Append("  LengthOfContractDescriptor: ").Append(LengthOfContractDescriptor).Append("\n");
            sb.Append("  ProbationCompleteDate: ").Append(ProbationCompleteDate).Append("\n");
            sb.Append("  Tenured: ").Append(Tenured).Append("\n");
            sb.Append("  TenureTrack: ").Append(TenureTrack).Append("\n");
            sb.Append("  BackgroundChecks: ").Append(BackgroundChecks).Append("\n");
            sb.Append("  Seniorities: ").Append(Seniorities).Append("\n");
            sb.Append("  Salary: ").Append(Salary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmStaffEducationOrganizationEmploymentAssociationExtension);
        }

        /// <summary>
        /// Returns true if TpdmStaffEducationOrganizationEmploymentAssociationExtension instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmStaffEducationOrganizationEmploymentAssociationExtension to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmStaffEducationOrganizationEmploymentAssociationExtension input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LengthOfContractDescriptor == input.LengthOfContractDescriptor ||
                    (this.LengthOfContractDescriptor != null &&
                    this.LengthOfContractDescriptor.Equals(input.LengthOfContractDescriptor))
                ) && 
                (
                    this.ProbationCompleteDate == input.ProbationCompleteDate ||
                    (this.ProbationCompleteDate != null &&
                    this.ProbationCompleteDate.Equals(input.ProbationCompleteDate))
                ) && 
                (
                    this.Tenured == input.Tenured ||
                    this.Tenured.Equals(input.Tenured)
                ) && 
                (
                    this.TenureTrack == input.TenureTrack ||
                    this.TenureTrack.Equals(input.TenureTrack)
                ) && 
                (
                    this.BackgroundChecks == input.BackgroundChecks ||
                    this.BackgroundChecks != null &&
                    input.BackgroundChecks != null &&
                    this.BackgroundChecks.SequenceEqual(input.BackgroundChecks)
                ) && 
                (
                    this.Seniorities == input.Seniorities ||
                    this.Seniorities != null &&
                    input.Seniorities != null &&
                    this.Seniorities.SequenceEqual(input.Seniorities)
                ) && 
                (
                    this.Salary == input.Salary ||
                    (this.Salary != null &&
                    this.Salary.Equals(input.Salary))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LengthOfContractDescriptor != null)
                    hashCode = hashCode * 59 + this.LengthOfContractDescriptor.GetHashCode();
                if (this.ProbationCompleteDate != null)
                    hashCode = hashCode * 59 + this.ProbationCompleteDate.GetHashCode();
                hashCode = hashCode * 59 + this.Tenured.GetHashCode();
                hashCode = hashCode * 59 + this.TenureTrack.GetHashCode();
                if (this.BackgroundChecks != null)
                    hashCode = hashCode * 59 + this.BackgroundChecks.GetHashCode();
                if (this.Seniorities != null)
                    hashCode = hashCode * 59 + this.Seniorities.GetHashCode();
                if (this.Salary != null)
                    hashCode = hashCode * 59 + this.Salary.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LengthOfContractDescriptor (string) maxLength
            if(this.LengthOfContractDescriptor != null && this.LengthOfContractDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LengthOfContractDescriptor, length must be less than 306.", new [] { "LengthOfContractDescriptor" });
            }

            yield break;
        }
    }

}
