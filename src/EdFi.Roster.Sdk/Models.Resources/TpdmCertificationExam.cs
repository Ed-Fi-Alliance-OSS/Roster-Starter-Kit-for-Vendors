/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.Roster.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.Roster.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmCertificationExam
    /// </summary>
    [DataContract(Name = "tpdm_certificationExam")]
    public partial class TpdmCertificationExam : IEquatable<TpdmCertificationExam>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmCertificationExam" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmCertificationExam() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmCertificationExam" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="certificationExamIdentifier">Identifier or serial number assigned to the CertificationExam. (required).</param>
        /// <param name="_namespace">Namespace for the CertificationExam. (required).</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference.</param>
        /// <param name="certificationExamTitle">The title of the Certification Exam. (required).</param>
        /// <param name="certificationExamTypeDescriptor">The type or category of Certification Exam..</param>
        /// <param name="effectiveDate">The year, month and day on which the CertificationExam is offered..</param>
        /// <param name="endDate">The month, day, and year on which the CertificationExam offering is expected to end..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmCertificationExam(string id = default(string), string certificationExamIdentifier = default(string), string _namespace = default(string), EdFiEducationOrganizationReference educationOrganizationReference = default(EdFiEducationOrganizationReference), string certificationExamTitle = default(string), string certificationExamTypeDescriptor = default(string), DateTime effectiveDate = default(DateTime), DateTime endDate = default(DateTime), string etag = default(string))
        {
            // to ensure "certificationExamIdentifier" is required (not null)
            this.CertificationExamIdentifier = certificationExamIdentifier ?? throw new ArgumentNullException("certificationExamIdentifier is a required property for TpdmCertificationExam and cannot be null");
            // to ensure "_namespace" is required (not null)
            this.Namespace = _namespace ?? throw new ArgumentNullException("_namespace is a required property for TpdmCertificationExam and cannot be null");
            // to ensure "certificationExamTitle" is required (not null)
            this.CertificationExamTitle = certificationExamTitle ?? throw new ArgumentNullException("certificationExamTitle is a required property for TpdmCertificationExam and cannot be null");
            this.Id = id;
            this.EducationOrganizationReference = educationOrganizationReference;
            this.CertificationExamTypeDescriptor = certificationExamTypeDescriptor;
            this.EffectiveDate = effectiveDate;
            this.EndDate = endDate;
            this.Etag = etag;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Identifier or serial number assigned to the CertificationExam.
        /// </summary>
        /// <value>Identifier or serial number assigned to the CertificationExam.</value>
        [DataMember(Name = "certificationExamIdentifier", IsRequired = true, EmitDefaultValue = false)]
        public string CertificationExamIdentifier { get; set; }

        /// <summary>
        /// Namespace for the CertificationExam.
        /// </summary>
        /// <value>Namespace for the CertificationExam.</value>
        [DataMember(Name = "namespace", IsRequired = true, EmitDefaultValue = false)]
        public string Namespace { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name = "educationOrganizationReference", EmitDefaultValue = false)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// The title of the Certification Exam.
        /// </summary>
        /// <value>The title of the Certification Exam.</value>
        [DataMember(Name = "certificationExamTitle", IsRequired = true, EmitDefaultValue = false)]
        public string CertificationExamTitle { get; set; }

        /// <summary>
        /// The type or category of Certification Exam.
        /// </summary>
        /// <value>The type or category of Certification Exam.</value>
        [DataMember(Name = "certificationExamTypeDescriptor", EmitDefaultValue = false)]
        public string CertificationExamTypeDescriptor { get; set; }

        /// <summary>
        /// The year, month and day on which the CertificationExam is offered.
        /// </summary>
        /// <value>The year, month and day on which the CertificationExam is offered.</value>
        [DataMember(Name = "effectiveDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime EffectiveDate { get; set; }

        /// <summary>
        /// The month, day, and year on which the CertificationExam offering is expected to end.
        /// </summary>
        /// <value>The month, day, and year on which the CertificationExam offering is expected to end.</value>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmCertificationExam {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CertificationExamIdentifier: ").Append(CertificationExamIdentifier).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  CertificationExamTitle: ").Append(CertificationExamTitle).Append("\n");
            sb.Append("  CertificationExamTypeDescriptor: ").Append(CertificationExamTypeDescriptor).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmCertificationExam);
        }

        /// <summary>
        /// Returns true if TpdmCertificationExam instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmCertificationExam to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmCertificationExam input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CertificationExamIdentifier == input.CertificationExamIdentifier ||
                    (this.CertificationExamIdentifier != null &&
                    this.CertificationExamIdentifier.Equals(input.CertificationExamIdentifier))
                ) && 
                (
                    this.Namespace == input.Namespace ||
                    (this.Namespace != null &&
                    this.Namespace.Equals(input.Namespace))
                ) && 
                (
                    this.EducationOrganizationReference == input.EducationOrganizationReference ||
                    (this.EducationOrganizationReference != null &&
                    this.EducationOrganizationReference.Equals(input.EducationOrganizationReference))
                ) && 
                (
                    this.CertificationExamTitle == input.CertificationExamTitle ||
                    (this.CertificationExamTitle != null &&
                    this.CertificationExamTitle.Equals(input.CertificationExamTitle))
                ) && 
                (
                    this.CertificationExamTypeDescriptor == input.CertificationExamTypeDescriptor ||
                    (this.CertificationExamTypeDescriptor != null &&
                    this.CertificationExamTypeDescriptor.Equals(input.CertificationExamTypeDescriptor))
                ) && 
                (
                    this.EffectiveDate == input.EffectiveDate ||
                    (this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(input.EffectiveDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CertificationExamIdentifier != null)
                    hashCode = hashCode * 59 + this.CertificationExamIdentifier.GetHashCode();
                if (this.Namespace != null)
                    hashCode = hashCode * 59 + this.Namespace.GetHashCode();
                if (this.EducationOrganizationReference != null)
                    hashCode = hashCode * 59 + this.EducationOrganizationReference.GetHashCode();
                if (this.CertificationExamTitle != null)
                    hashCode = hashCode * 59 + this.CertificationExamTitle.GetHashCode();
                if (this.CertificationExamTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.CertificationExamTypeDescriptor.GetHashCode();
                if (this.EffectiveDate != null)
                    hashCode = hashCode * 59 + this.EffectiveDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CertificationExamIdentifier (string) maxLength
            if(this.CertificationExamIdentifier != null && this.CertificationExamIdentifier.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CertificationExamIdentifier, length must be less than 60.", new [] { "CertificationExamIdentifier" });
            }

            // Namespace (string) maxLength
            if(this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            // CertificationExamTitle (string) maxLength
            if(this.CertificationExamTitle != null && this.CertificationExamTitle.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CertificationExamTitle, length must be less than 60.", new [] { "CertificationExamTitle" });
            }

            // CertificationExamTypeDescriptor (string) maxLength
            if(this.CertificationExamTypeDescriptor != null && this.CertificationExamTypeDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CertificationExamTypeDescriptor, length must be less than 306.", new [] { "CertificationExamTypeDescriptor" });
            }

            yield break;
        }
    }

}
