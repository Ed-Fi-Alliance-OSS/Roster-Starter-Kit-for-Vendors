/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.Roster.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.Roster.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmStaffEducatorPreparationProgramAssociation
    /// </summary>
    [DataContract(Name = "tpdm_staffEducatorPreparationProgramAssociation")]
    public partial class TpdmStaffEducatorPreparationProgramAssociation : IEquatable<TpdmStaffEducatorPreparationProgramAssociation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmStaffEducatorPreparationProgramAssociation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmStaffEducatorPreparationProgramAssociation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmStaffEducatorPreparationProgramAssociation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="educatorPreparationProgramReference">educatorPreparationProgramReference (required).</param>
        /// <param name="staffReference">staffReference (required).</param>
        /// <param name="beginDate">Start date for the association of staff to this program. (required).</param>
        /// <param name="completer">Indicator of whether the staff completed the EducatorPreparationProgram..</param>
        /// <param name="endDate">End date for the association of staff to this program..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmStaffEducatorPreparationProgramAssociation(string id = default(string), TpdmEducatorPreparationProgramReference educatorPreparationProgramReference = default(TpdmEducatorPreparationProgramReference), EdFiStaffReference staffReference = default(EdFiStaffReference), DateTime beginDate = default(DateTime), bool completer = default(bool), DateTime endDate = default(DateTime), string etag = default(string))
        {
            // to ensure "educatorPreparationProgramReference" is required (not null)
            this.EducatorPreparationProgramReference = educatorPreparationProgramReference ?? throw new ArgumentNullException("educatorPreparationProgramReference is a required property for TpdmStaffEducatorPreparationProgramAssociation and cannot be null");
            // to ensure "staffReference" is required (not null)
            this.StaffReference = staffReference ?? throw new ArgumentNullException("staffReference is a required property for TpdmStaffEducatorPreparationProgramAssociation and cannot be null");
            this.BeginDate = beginDate;
            this.Id = id;
            this.Completer = completer;
            this.EndDate = endDate;
            this.Etag = etag;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets EducatorPreparationProgramReference
        /// </summary>
        [DataMember(Name = "educatorPreparationProgramReference", IsRequired = true, EmitDefaultValue = false)]
        public TpdmEducatorPreparationProgramReference EducatorPreparationProgramReference { get; set; }

        /// <summary>
        /// Gets or Sets StaffReference
        /// </summary>
        [DataMember(Name = "staffReference", IsRequired = true, EmitDefaultValue = false)]
        public EdFiStaffReference StaffReference { get; set; }

        /// <summary>
        /// Start date for the association of staff to this program.
        /// </summary>
        /// <value>Start date for the association of staff to this program.</value>
        [DataMember(Name = "beginDate", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime BeginDate { get; set; }

        /// <summary>
        /// Indicator of whether the staff completed the EducatorPreparationProgram.
        /// </summary>
        /// <value>Indicator of whether the staff completed the EducatorPreparationProgram.</value>
        [DataMember(Name = "completer", EmitDefaultValue = true)]
        public bool Completer { get; set; }

        /// <summary>
        /// End date for the association of staff to this program.
        /// </summary>
        /// <value>End date for the association of staff to this program.</value>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmStaffEducatorPreparationProgramAssociation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EducatorPreparationProgramReference: ").Append(EducatorPreparationProgramReference).Append("\n");
            sb.Append("  StaffReference: ").Append(StaffReference).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  Completer: ").Append(Completer).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmStaffEducatorPreparationProgramAssociation);
        }

        /// <summary>
        /// Returns true if TpdmStaffEducatorPreparationProgramAssociation instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmStaffEducatorPreparationProgramAssociation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmStaffEducatorPreparationProgramAssociation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.EducatorPreparationProgramReference == input.EducatorPreparationProgramReference ||
                    (this.EducatorPreparationProgramReference != null &&
                    this.EducatorPreparationProgramReference.Equals(input.EducatorPreparationProgramReference))
                ) && 
                (
                    this.StaffReference == input.StaffReference ||
                    (this.StaffReference != null &&
                    this.StaffReference.Equals(input.StaffReference))
                ) && 
                (
                    this.BeginDate == input.BeginDate ||
                    (this.BeginDate != null &&
                    this.BeginDate.Equals(input.BeginDate))
                ) && 
                (
                    this.Completer == input.Completer ||
                    this.Completer.Equals(input.Completer)
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.EducatorPreparationProgramReference != null)
                    hashCode = hashCode * 59 + this.EducatorPreparationProgramReference.GetHashCode();
                if (this.StaffReference != null)
                    hashCode = hashCode * 59 + this.StaffReference.GetHashCode();
                if (this.BeginDate != null)
                    hashCode = hashCode * 59 + this.BeginDate.GetHashCode();
                hashCode = hashCode * 59 + this.Completer.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
