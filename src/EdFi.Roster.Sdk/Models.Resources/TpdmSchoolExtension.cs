/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.Roster.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.Roster.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmSchoolExtension
    /// </summary>
    [DataContract(Name = "tpdm_schoolExtension")]
    public partial class TpdmSchoolExtension : IEquatable<TpdmSchoolExtension>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmSchoolExtension" /> class.
        /// </summary>
        /// <param name="accreditationStatusDescriptor">Accreditation Status for a Education Preparation Provider..</param>
        /// <param name="federalLocaleCodeDescriptor">The federal locale code associated with an education organization..</param>
        /// <param name="improvingSchool">An indication of whether a school is identified as an improving school..</param>
        /// <param name="postSecondaryInstitutionReference">postSecondaryInstitutionReference.</param>
        public TpdmSchoolExtension(string accreditationStatusDescriptor = default(string), string federalLocaleCodeDescriptor = default(string), bool improvingSchool = default(bool), EdFiPostSecondaryInstitutionReference postSecondaryInstitutionReference = default(EdFiPostSecondaryInstitutionReference))
        {
            this.AccreditationStatusDescriptor = accreditationStatusDescriptor;
            this.FederalLocaleCodeDescriptor = federalLocaleCodeDescriptor;
            this.ImprovingSchool = improvingSchool;
            this.PostSecondaryInstitutionReference = postSecondaryInstitutionReference;
        }

        /// <summary>
        /// Accreditation Status for a Education Preparation Provider.
        /// </summary>
        /// <value>Accreditation Status for a Education Preparation Provider.</value>
        [DataMember(Name = "accreditationStatusDescriptor", EmitDefaultValue = false)]
        public string AccreditationStatusDescriptor { get; set; }

        /// <summary>
        /// The federal locale code associated with an education organization.
        /// </summary>
        /// <value>The federal locale code associated with an education organization.</value>
        [DataMember(Name = "federalLocaleCodeDescriptor", EmitDefaultValue = false)]
        public string FederalLocaleCodeDescriptor { get; set; }

        /// <summary>
        /// An indication of whether a school is identified as an improving school.
        /// </summary>
        /// <value>An indication of whether a school is identified as an improving school.</value>
        [DataMember(Name = "improvingSchool", EmitDefaultValue = true)]
        public bool ImprovingSchool { get; set; }

        /// <summary>
        /// Gets or Sets PostSecondaryInstitutionReference
        /// </summary>
        [DataMember(Name = "postSecondaryInstitutionReference", EmitDefaultValue = false)]
        public EdFiPostSecondaryInstitutionReference PostSecondaryInstitutionReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmSchoolExtension {\n");
            sb.Append("  AccreditationStatusDescriptor: ").Append(AccreditationStatusDescriptor).Append("\n");
            sb.Append("  FederalLocaleCodeDescriptor: ").Append(FederalLocaleCodeDescriptor).Append("\n");
            sb.Append("  ImprovingSchool: ").Append(ImprovingSchool).Append("\n");
            sb.Append("  PostSecondaryInstitutionReference: ").Append(PostSecondaryInstitutionReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmSchoolExtension);
        }

        /// <summary>
        /// Returns true if TpdmSchoolExtension instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmSchoolExtension to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmSchoolExtension input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccreditationStatusDescriptor == input.AccreditationStatusDescriptor ||
                    (this.AccreditationStatusDescriptor != null &&
                    this.AccreditationStatusDescriptor.Equals(input.AccreditationStatusDescriptor))
                ) && 
                (
                    this.FederalLocaleCodeDescriptor == input.FederalLocaleCodeDescriptor ||
                    (this.FederalLocaleCodeDescriptor != null &&
                    this.FederalLocaleCodeDescriptor.Equals(input.FederalLocaleCodeDescriptor))
                ) && 
                (
                    this.ImprovingSchool == input.ImprovingSchool ||
                    this.ImprovingSchool.Equals(input.ImprovingSchool)
                ) && 
                (
                    this.PostSecondaryInstitutionReference == input.PostSecondaryInstitutionReference ||
                    (this.PostSecondaryInstitutionReference != null &&
                    this.PostSecondaryInstitutionReference.Equals(input.PostSecondaryInstitutionReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccreditationStatusDescriptor != null)
                    hashCode = hashCode * 59 + this.AccreditationStatusDescriptor.GetHashCode();
                if (this.FederalLocaleCodeDescriptor != null)
                    hashCode = hashCode * 59 + this.FederalLocaleCodeDescriptor.GetHashCode();
                hashCode = hashCode * 59 + this.ImprovingSchool.GetHashCode();
                if (this.PostSecondaryInstitutionReference != null)
                    hashCode = hashCode * 59 + this.PostSecondaryInstitutionReference.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AccreditationStatusDescriptor (string) maxLength
            if(this.AccreditationStatusDescriptor != null && this.AccreditationStatusDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccreditationStatusDescriptor, length must be less than 306.", new [] { "AccreditationStatusDescriptor" });
            }

            // FederalLocaleCodeDescriptor (string) maxLength
            if(this.FederalLocaleCodeDescriptor != null && this.FederalLocaleCodeDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FederalLocaleCodeDescriptor, length must be less than 306.", new [] { "FederalLocaleCodeDescriptor" });
            }

            yield break;
        }
    }

}
