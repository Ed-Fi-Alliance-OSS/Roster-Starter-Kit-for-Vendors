/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EdFi.Roster.Sdk.Client;
using EdFi.Roster.Sdk.Models.Resources;

namespace EdFi.Roster.Sdk.Api.Resources
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICoursesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns></returns>
        void DeleteCourseById(string id, string ifMatch = default(string));

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCourseByIdWithHttpInfo(string id, string ifMatch = default(string));
        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// The DELETES operation is used to retrieve deleted resources.
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;DeletedResource&gt;</returns>
        List<DeletedResource> DeletesCourses(int? offset = default(int?), int? limit = default(int?), int? minChangeVersion = default(int?), int? maxChangeVersion = default(int?), string snapshotIdentifier = default(string));

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// The DELETES operation is used to retrieve deleted resources.
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;DeletedResource&gt;</returns>
        ApiResponse<List<DeletedResource>> DeletesCoursesWithHttpInfo(int? offset = default(int?), int? limit = default(int?), int? minChangeVersion = default(int?), int? maxChangeVersion = default(int?), string snapshotIdentifier = default(string));
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="courseCode">A unique alphanumeric code assigned to a course. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="academicSubjectDescriptor">The intended major subject area of the course. (optional)</param>
        /// <param name="careerPathwayDescriptor">Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum. (optional)</param>
        /// <param name="courseDefinedByDescriptor">Specifies whether the course was defined by the SEA, LEA, School, or national organization. (optional)</param>
        /// <param name="courseGPAApplicabilityDescriptor">An indicator of whether or not the course being described is included in the computation of the student&#39;s Grade Point Average, and if so, if it is weighted differently from regular courses. (optional)</param>
        /// <param name="minimumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="maximumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="courseDescription">A description of the content standards and goals covered in the course. Reference may be made to state or national content standards. (optional)</param>
        /// <param name="courseTitle">The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts). (optional)</param>
        /// <param name="dateCourseAdopted">Date the course was adopted by the education agency. (optional)</param>
        /// <param name="highSchoolCourseRequirement">An indication that this course may satisfy high school graduation requirements in the course&#39;s subject area. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxCompletionsForCredit">Designates how many times the course may be taken with credit received by the student. (optional)</param>
        /// <param name="maximumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="maximumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="minimumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="minimumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="numberOfParts">The number of parts identified for a course. (optional)</param>
        /// <param name="timeRequiredForCompletion">The actual or estimated number of clock minutes required for class completion.  This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;EdFiCourse&gt;</returns>
        List<EdFiCourse> GetCourses(int? offset = default(int?), int? limit = default(int?), int? minChangeVersion = default(int?), int? maxChangeVersion = default(int?), bool? totalCount = default(bool?), string courseCode = default(string), int? educationOrganizationId = default(int?), string academicSubjectDescriptor = default(string), string careerPathwayDescriptor = default(string), string courseDefinedByDescriptor = default(string), string courseGPAApplicabilityDescriptor = default(string), string minimumAvailableCreditTypeDescriptor = default(string), string maximumAvailableCreditTypeDescriptor = default(string), string courseDescription = default(string), string courseTitle = default(string), DateTime? dateCourseAdopted = default(DateTime?), bool? highSchoolCourseRequirement = default(bool?), string id = default(string), int? maxCompletionsForCredit = default(int?), double? maximumAvailableCreditConversion = default(double?), double? maximumAvailableCredits = default(double?), double? minimumAvailableCreditConversion = default(double?), double? minimumAvailableCredits = default(double?), int? numberOfParts = default(int?), int? timeRequiredForCompletion = default(int?), string snapshotIdentifier = default(string));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="courseCode">A unique alphanumeric code assigned to a course. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="academicSubjectDescriptor">The intended major subject area of the course. (optional)</param>
        /// <param name="careerPathwayDescriptor">Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum. (optional)</param>
        /// <param name="courseDefinedByDescriptor">Specifies whether the course was defined by the SEA, LEA, School, or national organization. (optional)</param>
        /// <param name="courseGPAApplicabilityDescriptor">An indicator of whether or not the course being described is included in the computation of the student&#39;s Grade Point Average, and if so, if it is weighted differently from regular courses. (optional)</param>
        /// <param name="minimumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="maximumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="courseDescription">A description of the content standards and goals covered in the course. Reference may be made to state or national content standards. (optional)</param>
        /// <param name="courseTitle">The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts). (optional)</param>
        /// <param name="dateCourseAdopted">Date the course was adopted by the education agency. (optional)</param>
        /// <param name="highSchoolCourseRequirement">An indication that this course may satisfy high school graduation requirements in the course&#39;s subject area. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxCompletionsForCredit">Designates how many times the course may be taken with credit received by the student. (optional)</param>
        /// <param name="maximumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="maximumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="minimumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="minimumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="numberOfParts">The number of parts identified for a course. (optional)</param>
        /// <param name="timeRequiredForCompletion">The actual or estimated number of clock minutes required for class completion.  This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;EdFiCourse&gt;</returns>
        ApiResponse<List<EdFiCourse>> GetCoursesWithHttpInfo(int? offset = default(int?), int? limit = default(int?), int? minChangeVersion = default(int?), int? maxChangeVersion = default(int?), bool? totalCount = default(bool?), string courseCode = default(string), int? educationOrganizationId = default(int?), string academicSubjectDescriptor = default(string), string careerPathwayDescriptor = default(string), string courseDefinedByDescriptor = default(string), string courseGPAApplicabilityDescriptor = default(string), string minimumAvailableCreditTypeDescriptor = default(string), string maximumAvailableCreditTypeDescriptor = default(string), string courseDescription = default(string), string courseTitle = default(string), DateTime? dateCourseAdopted = default(DateTime?), bool? highSchoolCourseRequirement = default(bool?), string id = default(string), int? maxCompletionsForCredit = default(int?), double? maximumAvailableCreditConversion = default(double?), double? maximumAvailableCredits = default(double?), double? minimumAvailableCreditConversion = default(double?), double? minimumAvailableCredits = default(double?), int? numberOfParts = default(int?), int? timeRequiredForCompletion = default(int?), string snapshotIdentifier = default(string));
        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>EdFiCourse</returns>
        EdFiCourse GetCoursesById(string id, string ifNoneMatch = default(string), string snapshotIdentifier = default(string));

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of EdFiCourse</returns>
        ApiResponse<EdFiCourse> GetCoursesByIdWithHttpInfo(string id, string ifNoneMatch = default(string), string snapshotIdentifier = default(string));
        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="course">The JSON representation of the \&quot;course\&quot; resource to be created or updated.</param>
        /// <returns></returns>
        void PostCourse(EdFiCourse course);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="course">The JSON representation of the \&quot;course\&quot; resource to be created or updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCourseWithHttpInfo(EdFiCourse course);
        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="course">The JSON representation of the \&quot;course\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns></returns>
        void PutCourse(string id, EdFiCourse course, string ifMatch = default(string));

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="course">The JSON representation of the \&quot;course\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutCourseWithHttpInfo(string id, EdFiCourse course, string ifMatch = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICoursesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCourseByIdAsync(string id, string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseByIdWithHttpInfoAsync(string id, string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// The DELETES operation is used to retrieve deleted resources.
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DeletedResource&gt;</returns>
        System.Threading.Tasks.Task<List<DeletedResource>> DeletesCoursesAsync(int? offset = default(int?), int? limit = default(int?), int? minChangeVersion = default(int?), int? maxChangeVersion = default(int?), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// The DELETES operation is used to retrieve deleted resources.
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DeletedResource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeletedResource>>> DeletesCoursesWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), int? minChangeVersion = default(int?), int? maxChangeVersion = default(int?), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="courseCode">A unique alphanumeric code assigned to a course. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="academicSubjectDescriptor">The intended major subject area of the course. (optional)</param>
        /// <param name="careerPathwayDescriptor">Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum. (optional)</param>
        /// <param name="courseDefinedByDescriptor">Specifies whether the course was defined by the SEA, LEA, School, or national organization. (optional)</param>
        /// <param name="courseGPAApplicabilityDescriptor">An indicator of whether or not the course being described is included in the computation of the student&#39;s Grade Point Average, and if so, if it is weighted differently from regular courses. (optional)</param>
        /// <param name="minimumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="maximumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="courseDescription">A description of the content standards and goals covered in the course. Reference may be made to state or national content standards. (optional)</param>
        /// <param name="courseTitle">The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts). (optional)</param>
        /// <param name="dateCourseAdopted">Date the course was adopted by the education agency. (optional)</param>
        /// <param name="highSchoolCourseRequirement">An indication that this course may satisfy high school graduation requirements in the course&#39;s subject area. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxCompletionsForCredit">Designates how many times the course may be taken with credit received by the student. (optional)</param>
        /// <param name="maximumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="maximumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="minimumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="minimumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="numberOfParts">The number of parts identified for a course. (optional)</param>
        /// <param name="timeRequiredForCompletion">The actual or estimated number of clock minutes required for class completion.  This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EdFiCourse&gt;</returns>
        System.Threading.Tasks.Task<List<EdFiCourse>> GetCoursesAsync(int? offset = default(int?), int? limit = default(int?), int? minChangeVersion = default(int?), int? maxChangeVersion = default(int?), bool? totalCount = default(bool?), string courseCode = default(string), int? educationOrganizationId = default(int?), string academicSubjectDescriptor = default(string), string careerPathwayDescriptor = default(string), string courseDefinedByDescriptor = default(string), string courseGPAApplicabilityDescriptor = default(string), string minimumAvailableCreditTypeDescriptor = default(string), string maximumAvailableCreditTypeDescriptor = default(string), string courseDescription = default(string), string courseTitle = default(string), DateTime? dateCourseAdopted = default(DateTime?), bool? highSchoolCourseRequirement = default(bool?), string id = default(string), int? maxCompletionsForCredit = default(int?), double? maximumAvailableCreditConversion = default(double?), double? maximumAvailableCredits = default(double?), double? minimumAvailableCreditConversion = default(double?), double? minimumAvailableCredits = default(double?), int? numberOfParts = default(int?), int? timeRequiredForCompletion = default(int?), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="courseCode">A unique alphanumeric code assigned to a course. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="academicSubjectDescriptor">The intended major subject area of the course. (optional)</param>
        /// <param name="careerPathwayDescriptor">Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum. (optional)</param>
        /// <param name="courseDefinedByDescriptor">Specifies whether the course was defined by the SEA, LEA, School, or national organization. (optional)</param>
        /// <param name="courseGPAApplicabilityDescriptor">An indicator of whether or not the course being described is included in the computation of the student&#39;s Grade Point Average, and if so, if it is weighted differently from regular courses. (optional)</param>
        /// <param name="minimumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="maximumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="courseDescription">A description of the content standards and goals covered in the course. Reference may be made to state or national content standards. (optional)</param>
        /// <param name="courseTitle">The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts). (optional)</param>
        /// <param name="dateCourseAdopted">Date the course was adopted by the education agency. (optional)</param>
        /// <param name="highSchoolCourseRequirement">An indication that this course may satisfy high school graduation requirements in the course&#39;s subject area. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxCompletionsForCredit">Designates how many times the course may be taken with credit received by the student. (optional)</param>
        /// <param name="maximumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="maximumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="minimumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="minimumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="numberOfParts">The number of parts identified for a course. (optional)</param>
        /// <param name="timeRequiredForCompletion">The actual or estimated number of clock minutes required for class completion.  This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EdFiCourse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EdFiCourse>>> GetCoursesWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), int? minChangeVersion = default(int?), int? maxChangeVersion = default(int?), bool? totalCount = default(bool?), string courseCode = default(string), int? educationOrganizationId = default(int?), string academicSubjectDescriptor = default(string), string careerPathwayDescriptor = default(string), string courseDefinedByDescriptor = default(string), string courseGPAApplicabilityDescriptor = default(string), string minimumAvailableCreditTypeDescriptor = default(string), string maximumAvailableCreditTypeDescriptor = default(string), string courseDescription = default(string), string courseTitle = default(string), DateTime? dateCourseAdopted = default(DateTime?), bool? highSchoolCourseRequirement = default(bool?), string id = default(string), int? maxCompletionsForCredit = default(int?), double? maximumAvailableCreditConversion = default(double?), double? maximumAvailableCredits = default(double?), double? minimumAvailableCreditConversion = default(double?), double? minimumAvailableCredits = default(double?), int? numberOfParts = default(int?), int? timeRequiredForCompletion = default(int?), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdFiCourse</returns>
        System.Threading.Tasks.Task<EdFiCourse> GetCoursesByIdAsync(string id, string ifNoneMatch = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdFiCourse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdFiCourse>> GetCoursesByIdWithHttpInfoAsync(string id, string ifNoneMatch = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="course">The JSON representation of the \&quot;course\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCourseAsync(EdFiCourse course, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="course">The JSON representation of the \&quot;course\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCourseWithHttpInfoAsync(EdFiCourse course, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="course">The JSON representation of the \&quot;course\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutCourseAsync(string id, EdFiCourse course, string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="course">The JSON representation of the \&quot;course\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutCourseWithHttpInfoAsync(string id, EdFiCourse course, string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICoursesApi : ICoursesApiSync, ICoursesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CoursesApi : ICoursesApi
    {
        private EdFi.Roster.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CoursesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CoursesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoursesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CoursesApi(String basePath)
        {
            this.Configuration = EdFi.Roster.Sdk.Client.Configuration.MergeConfigurations(
                EdFi.Roster.Sdk.Client.GlobalConfiguration.Instance,
                new EdFi.Roster.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EdFi.Roster.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdFi.Roster.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EdFi.Roster.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoursesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CoursesApi(EdFi.Roster.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EdFi.Roster.Sdk.Client.Configuration.MergeConfigurations(
                EdFi.Roster.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EdFi.Roster.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdFi.Roster.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EdFi.Roster.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoursesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CoursesApi(EdFi.Roster.Sdk.Client.ISynchronousClient client, EdFi.Roster.Sdk.Client.IAsynchronousClient asyncClient, EdFi.Roster.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EdFi.Roster.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EdFi.Roster.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EdFi.Roster.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EdFi.Roster.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EdFi.Roster.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns></returns>
        public void DeleteCourseById(string id, string ifMatch = default(string))
        {
            DeleteCourseByIdWithHttpInfo(id, ifMatch);
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdFi.Roster.Sdk.Client.ApiResponse<Object> DeleteCourseByIdWithHttpInfo(string id, string ifMatch = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new EdFi.Roster.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling CoursesApi->DeleteCourseById");

            EdFi.Roster.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.Roster.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (ifMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Match", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(ifMatch)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/ed-fi/courses/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCourseById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCourseByIdAsync(string id, string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCourseByIdWithHttpInfoAsync(id, ifMatch, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdFi.Roster.Sdk.Client.ApiResponse<Object>> DeleteCourseByIdWithHttpInfoAsync(string id, string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new EdFi.Roster.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling CoursesApi->DeleteCourseById");


            EdFi.Roster.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.Roster.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (ifMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Match", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(ifMatch)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/ed-fi/courses/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCourseById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. The DELETES operation is used to retrieve deleted resources.
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;DeletedResource&gt;</returns>
        public List<DeletedResource> DeletesCourses(int? offset = default(int?), int? limit = default(int?), int? minChangeVersion = default(int?), int? maxChangeVersion = default(int?), string snapshotIdentifier = default(string))
        {
            EdFi.Roster.Sdk.Client.ApiResponse<List<DeletedResource>> localVarResponse = DeletesCoursesWithHttpInfo(offset, limit, minChangeVersion, maxChangeVersion, snapshotIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. The DELETES operation is used to retrieve deleted resources.
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;DeletedResource&gt;</returns>
        public EdFi.Roster.Sdk.Client.ApiResponse<List<DeletedResource>> DeletesCoursesWithHttpInfo(int? offset = default(int?), int? limit = default(int?), int? minChangeVersion = default(int?), int? maxChangeVersion = default(int?), string snapshotIdentifier = default(string))
        {
            EdFi.Roster.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.Roster.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (minChangeVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "minChangeVersion", minChangeVersion));
            }
            if (maxChangeVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "maxChangeVersion", maxChangeVersion));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DeletedResource>>("/ed-fi/courses/deletes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletesCourses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. The DELETES operation is used to retrieve deleted resources.
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DeletedResource&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeletedResource>> DeletesCoursesAsync(int? offset = default(int?), int? limit = default(int?), int? minChangeVersion = default(int?), int? maxChangeVersion = default(int?), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdFi.Roster.Sdk.Client.ApiResponse<List<DeletedResource>> localVarResponse = await DeletesCoursesWithHttpInfoAsync(offset, limit, minChangeVersion, maxChangeVersion, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. The DELETES operation is used to retrieve deleted resources.
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DeletedResource&gt;)</returns>
        public async System.Threading.Tasks.Task<EdFi.Roster.Sdk.Client.ApiResponse<List<DeletedResource>>> DeletesCoursesWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), int? minChangeVersion = default(int?), int? maxChangeVersion = default(int?), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdFi.Roster.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.Roster.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (minChangeVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "minChangeVersion", minChangeVersion));
            }
            if (maxChangeVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "maxChangeVersion", maxChangeVersion));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DeletedResource>>("/ed-fi/courses/deletes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletesCourses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="courseCode">A unique alphanumeric code assigned to a course. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="academicSubjectDescriptor">The intended major subject area of the course. (optional)</param>
        /// <param name="careerPathwayDescriptor">Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum. (optional)</param>
        /// <param name="courseDefinedByDescriptor">Specifies whether the course was defined by the SEA, LEA, School, or national organization. (optional)</param>
        /// <param name="courseGPAApplicabilityDescriptor">An indicator of whether or not the course being described is included in the computation of the student&#39;s Grade Point Average, and if so, if it is weighted differently from regular courses. (optional)</param>
        /// <param name="minimumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="maximumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="courseDescription">A description of the content standards and goals covered in the course. Reference may be made to state or national content standards. (optional)</param>
        /// <param name="courseTitle">The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts). (optional)</param>
        /// <param name="dateCourseAdopted">Date the course was adopted by the education agency. (optional)</param>
        /// <param name="highSchoolCourseRequirement">An indication that this course may satisfy high school graduation requirements in the course&#39;s subject area. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxCompletionsForCredit">Designates how many times the course may be taken with credit received by the student. (optional)</param>
        /// <param name="maximumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="maximumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="minimumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="minimumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="numberOfParts">The number of parts identified for a course. (optional)</param>
        /// <param name="timeRequiredForCompletion">The actual or estimated number of clock minutes required for class completion.  This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;EdFiCourse&gt;</returns>
        public List<EdFiCourse> GetCourses(int? offset = default(int?), int? limit = default(int?), int? minChangeVersion = default(int?), int? maxChangeVersion = default(int?), bool? totalCount = default(bool?), string courseCode = default(string), int? educationOrganizationId = default(int?), string academicSubjectDescriptor = default(string), string careerPathwayDescriptor = default(string), string courseDefinedByDescriptor = default(string), string courseGPAApplicabilityDescriptor = default(string), string minimumAvailableCreditTypeDescriptor = default(string), string maximumAvailableCreditTypeDescriptor = default(string), string courseDescription = default(string), string courseTitle = default(string), DateTime? dateCourseAdopted = default(DateTime?), bool? highSchoolCourseRequirement = default(bool?), string id = default(string), int? maxCompletionsForCredit = default(int?), double? maximumAvailableCreditConversion = default(double?), double? maximumAvailableCredits = default(double?), double? minimumAvailableCreditConversion = default(double?), double? minimumAvailableCredits = default(double?), int? numberOfParts = default(int?), int? timeRequiredForCompletion = default(int?), string snapshotIdentifier = default(string))
        {
            EdFi.Roster.Sdk.Client.ApiResponse<List<EdFiCourse>> localVarResponse = GetCoursesWithHttpInfo(offset, limit, minChangeVersion, maxChangeVersion, totalCount, courseCode, educationOrganizationId, academicSubjectDescriptor, careerPathwayDescriptor, courseDefinedByDescriptor, courseGPAApplicabilityDescriptor, minimumAvailableCreditTypeDescriptor, maximumAvailableCreditTypeDescriptor, courseDescription, courseTitle, dateCourseAdopted, highSchoolCourseRequirement, id, maxCompletionsForCredit, maximumAvailableCreditConversion, maximumAvailableCredits, minimumAvailableCreditConversion, minimumAvailableCredits, numberOfParts, timeRequiredForCompletion, snapshotIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="courseCode">A unique alphanumeric code assigned to a course. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="academicSubjectDescriptor">The intended major subject area of the course. (optional)</param>
        /// <param name="careerPathwayDescriptor">Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum. (optional)</param>
        /// <param name="courseDefinedByDescriptor">Specifies whether the course was defined by the SEA, LEA, School, or national organization. (optional)</param>
        /// <param name="courseGPAApplicabilityDescriptor">An indicator of whether or not the course being described is included in the computation of the student&#39;s Grade Point Average, and if so, if it is weighted differently from regular courses. (optional)</param>
        /// <param name="minimumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="maximumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="courseDescription">A description of the content standards and goals covered in the course. Reference may be made to state or national content standards. (optional)</param>
        /// <param name="courseTitle">The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts). (optional)</param>
        /// <param name="dateCourseAdopted">Date the course was adopted by the education agency. (optional)</param>
        /// <param name="highSchoolCourseRequirement">An indication that this course may satisfy high school graduation requirements in the course&#39;s subject area. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxCompletionsForCredit">Designates how many times the course may be taken with credit received by the student. (optional)</param>
        /// <param name="maximumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="maximumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="minimumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="minimumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="numberOfParts">The number of parts identified for a course. (optional)</param>
        /// <param name="timeRequiredForCompletion">The actual or estimated number of clock minutes required for class completion.  This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;EdFiCourse&gt;</returns>
        public EdFi.Roster.Sdk.Client.ApiResponse<List<EdFiCourse>> GetCoursesWithHttpInfo(int? offset = default(int?), int? limit = default(int?), int? minChangeVersion = default(int?), int? maxChangeVersion = default(int?), bool? totalCount = default(bool?), string courseCode = default(string), int? educationOrganizationId = default(int?), string academicSubjectDescriptor = default(string), string careerPathwayDescriptor = default(string), string courseDefinedByDescriptor = default(string), string courseGPAApplicabilityDescriptor = default(string), string minimumAvailableCreditTypeDescriptor = default(string), string maximumAvailableCreditTypeDescriptor = default(string), string courseDescription = default(string), string courseTitle = default(string), DateTime? dateCourseAdopted = default(DateTime?), bool? highSchoolCourseRequirement = default(bool?), string id = default(string), int? maxCompletionsForCredit = default(int?), double? maximumAvailableCreditConversion = default(double?), double? maximumAvailableCredits = default(double?), double? minimumAvailableCreditConversion = default(double?), double? minimumAvailableCredits = default(double?), int? numberOfParts = default(int?), int? timeRequiredForCompletion = default(int?), string snapshotIdentifier = default(string))
        {
            EdFi.Roster.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.Roster.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (minChangeVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "minChangeVersion", minChangeVersion));
            }
            if (maxChangeVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "maxChangeVersion", maxChangeVersion));
            }
            if (totalCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "totalCount", totalCount));
            }
            if (courseCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "courseCode", courseCode));
            }
            if (educationOrganizationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "educationOrganizationId", educationOrganizationId));
            }
            if (academicSubjectDescriptor != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "academicSubjectDescriptor", academicSubjectDescriptor));
            }
            if (careerPathwayDescriptor != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "careerPathwayDescriptor", careerPathwayDescriptor));
            }
            if (courseDefinedByDescriptor != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "courseDefinedByDescriptor", courseDefinedByDescriptor));
            }
            if (courseGPAApplicabilityDescriptor != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "courseGPAApplicabilityDescriptor", courseGPAApplicabilityDescriptor));
            }
            if (minimumAvailableCreditTypeDescriptor != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "minimumAvailableCreditTypeDescriptor", minimumAvailableCreditTypeDescriptor));
            }
            if (maximumAvailableCreditTypeDescriptor != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "maximumAvailableCreditTypeDescriptor", maximumAvailableCreditTypeDescriptor));
            }
            if (courseDescription != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "courseDescription", courseDescription));
            }
            if (courseTitle != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "courseTitle", courseTitle));
            }
            if (dateCourseAdopted != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "dateCourseAdopted", dateCourseAdopted));
            }
            if (highSchoolCourseRequirement != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "highSchoolCourseRequirement", highSchoolCourseRequirement));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (maxCompletionsForCredit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "maxCompletionsForCredit", maxCompletionsForCredit));
            }
            if (maximumAvailableCreditConversion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "maximumAvailableCreditConversion", maximumAvailableCreditConversion));
            }
            if (maximumAvailableCredits != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "maximumAvailableCredits", maximumAvailableCredits));
            }
            if (minimumAvailableCreditConversion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "minimumAvailableCreditConversion", minimumAvailableCreditConversion));
            }
            if (minimumAvailableCredits != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "minimumAvailableCredits", minimumAvailableCredits));
            }
            if (numberOfParts != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "numberOfParts", numberOfParts));
            }
            if (timeRequiredForCompletion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "timeRequiredForCompletion", timeRequiredForCompletion));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EdFiCourse>>("/ed-fi/courses", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCourses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="courseCode">A unique alphanumeric code assigned to a course. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="academicSubjectDescriptor">The intended major subject area of the course. (optional)</param>
        /// <param name="careerPathwayDescriptor">Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum. (optional)</param>
        /// <param name="courseDefinedByDescriptor">Specifies whether the course was defined by the SEA, LEA, School, or national organization. (optional)</param>
        /// <param name="courseGPAApplicabilityDescriptor">An indicator of whether or not the course being described is included in the computation of the student&#39;s Grade Point Average, and if so, if it is weighted differently from regular courses. (optional)</param>
        /// <param name="minimumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="maximumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="courseDescription">A description of the content standards and goals covered in the course. Reference may be made to state or national content standards. (optional)</param>
        /// <param name="courseTitle">The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts). (optional)</param>
        /// <param name="dateCourseAdopted">Date the course was adopted by the education agency. (optional)</param>
        /// <param name="highSchoolCourseRequirement">An indication that this course may satisfy high school graduation requirements in the course&#39;s subject area. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxCompletionsForCredit">Designates how many times the course may be taken with credit received by the student. (optional)</param>
        /// <param name="maximumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="maximumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="minimumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="minimumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="numberOfParts">The number of parts identified for a course. (optional)</param>
        /// <param name="timeRequiredForCompletion">The actual or estimated number of clock minutes required for class completion.  This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EdFiCourse&gt;</returns>
        public async System.Threading.Tasks.Task<List<EdFiCourse>> GetCoursesAsync(int? offset = default(int?), int? limit = default(int?), int? minChangeVersion = default(int?), int? maxChangeVersion = default(int?), bool? totalCount = default(bool?), string courseCode = default(string), int? educationOrganizationId = default(int?), string academicSubjectDescriptor = default(string), string careerPathwayDescriptor = default(string), string courseDefinedByDescriptor = default(string), string courseGPAApplicabilityDescriptor = default(string), string minimumAvailableCreditTypeDescriptor = default(string), string maximumAvailableCreditTypeDescriptor = default(string), string courseDescription = default(string), string courseTitle = default(string), DateTime? dateCourseAdopted = default(DateTime?), bool? highSchoolCourseRequirement = default(bool?), string id = default(string), int? maxCompletionsForCredit = default(int?), double? maximumAvailableCreditConversion = default(double?), double? maximumAvailableCredits = default(double?), double? minimumAvailableCreditConversion = default(double?), double? minimumAvailableCredits = default(double?), int? numberOfParts = default(int?), int? timeRequiredForCompletion = default(int?), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdFi.Roster.Sdk.Client.ApiResponse<List<EdFiCourse>> localVarResponse = await GetCoursesWithHttpInfoAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, courseCode, educationOrganizationId, academicSubjectDescriptor, careerPathwayDescriptor, courseDefinedByDescriptor, courseGPAApplicabilityDescriptor, minimumAvailableCreditTypeDescriptor, maximumAvailableCreditTypeDescriptor, courseDescription, courseTitle, dateCourseAdopted, highSchoolCourseRequirement, id, maxCompletionsForCredit, maximumAvailableCreditConversion, maximumAvailableCredits, minimumAvailableCreditConversion, minimumAvailableCredits, numberOfParts, timeRequiredForCompletion, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="courseCode">A unique alphanumeric code assigned to a course. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="academicSubjectDescriptor">The intended major subject area of the course. (optional)</param>
        /// <param name="careerPathwayDescriptor">Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum. (optional)</param>
        /// <param name="courseDefinedByDescriptor">Specifies whether the course was defined by the SEA, LEA, School, or national organization. (optional)</param>
        /// <param name="courseGPAApplicabilityDescriptor">An indicator of whether or not the course being described is included in the computation of the student&#39;s Grade Point Average, and if so, if it is weighted differently from regular courses. (optional)</param>
        /// <param name="minimumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="maximumAvailableCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="courseDescription">A description of the content standards and goals covered in the course. Reference may be made to state or national content standards. (optional)</param>
        /// <param name="courseTitle">The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts). (optional)</param>
        /// <param name="dateCourseAdopted">Date the course was adopted by the education agency. (optional)</param>
        /// <param name="highSchoolCourseRequirement">An indication that this course may satisfy high school graduation requirements in the course&#39;s subject area. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="maxCompletionsForCredit">Designates how many times the course may be taken with credit received by the student. (optional)</param>
        /// <param name="maximumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="maximumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="minimumAvailableCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units. (optional)</param>
        /// <param name="minimumAvailableCredits">The value of credits or units of value awarded for the completion of a course. (optional)</param>
        /// <param name="numberOfParts">The number of parts identified for a course. (optional)</param>
        /// <param name="timeRequiredForCompletion">The actual or estimated number of clock minutes required for class completion.  This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EdFiCourse&gt;)</returns>
        public async System.Threading.Tasks.Task<EdFi.Roster.Sdk.Client.ApiResponse<List<EdFiCourse>>> GetCoursesWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), int? minChangeVersion = default(int?), int? maxChangeVersion = default(int?), bool? totalCount = default(bool?), string courseCode = default(string), int? educationOrganizationId = default(int?), string academicSubjectDescriptor = default(string), string careerPathwayDescriptor = default(string), string courseDefinedByDescriptor = default(string), string courseGPAApplicabilityDescriptor = default(string), string minimumAvailableCreditTypeDescriptor = default(string), string maximumAvailableCreditTypeDescriptor = default(string), string courseDescription = default(string), string courseTitle = default(string), DateTime? dateCourseAdopted = default(DateTime?), bool? highSchoolCourseRequirement = default(bool?), string id = default(string), int? maxCompletionsForCredit = default(int?), double? maximumAvailableCreditConversion = default(double?), double? maximumAvailableCredits = default(double?), double? minimumAvailableCreditConversion = default(double?), double? minimumAvailableCredits = default(double?), int? numberOfParts = default(int?), int? timeRequiredForCompletion = default(int?), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdFi.Roster.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.Roster.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (minChangeVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "minChangeVersion", minChangeVersion));
            }
            if (maxChangeVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "maxChangeVersion", maxChangeVersion));
            }
            if (totalCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "totalCount", totalCount));
            }
            if (courseCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "courseCode", courseCode));
            }
            if (educationOrganizationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "educationOrganizationId", educationOrganizationId));
            }
            if (academicSubjectDescriptor != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "academicSubjectDescriptor", academicSubjectDescriptor));
            }
            if (careerPathwayDescriptor != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "careerPathwayDescriptor", careerPathwayDescriptor));
            }
            if (courseDefinedByDescriptor != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "courseDefinedByDescriptor", courseDefinedByDescriptor));
            }
            if (courseGPAApplicabilityDescriptor != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "courseGPAApplicabilityDescriptor", courseGPAApplicabilityDescriptor));
            }
            if (minimumAvailableCreditTypeDescriptor != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "minimumAvailableCreditTypeDescriptor", minimumAvailableCreditTypeDescriptor));
            }
            if (maximumAvailableCreditTypeDescriptor != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "maximumAvailableCreditTypeDescriptor", maximumAvailableCreditTypeDescriptor));
            }
            if (courseDescription != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "courseDescription", courseDescription));
            }
            if (courseTitle != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "courseTitle", courseTitle));
            }
            if (dateCourseAdopted != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "dateCourseAdopted", dateCourseAdopted));
            }
            if (highSchoolCourseRequirement != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "highSchoolCourseRequirement", highSchoolCourseRequirement));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (maxCompletionsForCredit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "maxCompletionsForCredit", maxCompletionsForCredit));
            }
            if (maximumAvailableCreditConversion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "maximumAvailableCreditConversion", maximumAvailableCreditConversion));
            }
            if (maximumAvailableCredits != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "maximumAvailableCredits", maximumAvailableCredits));
            }
            if (minimumAvailableCreditConversion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "minimumAvailableCreditConversion", minimumAvailableCreditConversion));
            }
            if (minimumAvailableCredits != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "minimumAvailableCredits", minimumAvailableCredits));
            }
            if (numberOfParts != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "numberOfParts", numberOfParts));
            }
            if (timeRequiredForCompletion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "timeRequiredForCompletion", timeRequiredForCompletion));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EdFiCourse>>("/ed-fi/courses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCourses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>EdFiCourse</returns>
        public EdFiCourse GetCoursesById(string id, string ifNoneMatch = default(string), string snapshotIdentifier = default(string))
        {
            EdFi.Roster.Sdk.Client.ApiResponse<EdFiCourse> localVarResponse = GetCoursesByIdWithHttpInfo(id, ifNoneMatch, snapshotIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of EdFiCourse</returns>
        public EdFi.Roster.Sdk.Client.ApiResponse<EdFiCourse> GetCoursesByIdWithHttpInfo(string id, string ifNoneMatch = default(string), string snapshotIdentifier = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new EdFi.Roster.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling CoursesApi->GetCoursesById");

            EdFi.Roster.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.Roster.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EdFiCourse>("/ed-fi/courses/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCoursesById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdFiCourse</returns>
        public async System.Threading.Tasks.Task<EdFiCourse> GetCoursesByIdAsync(string id, string ifNoneMatch = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdFi.Roster.Sdk.Client.ApiResponse<EdFiCourse> localVarResponse = await GetCoursesByIdWithHttpInfoAsync(id, ifNoneMatch, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdFiCourse)</returns>
        public async System.Threading.Tasks.Task<EdFi.Roster.Sdk.Client.ApiResponse<EdFiCourse>> GetCoursesByIdWithHttpInfoAsync(string id, string ifNoneMatch = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new EdFi.Roster.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling CoursesApi->GetCoursesById");


            EdFi.Roster.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.Roster.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EdFiCourse>("/ed-fi/courses/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCoursesById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="course">The JSON representation of the \&quot;course\&quot; resource to be created or updated.</param>
        /// <returns></returns>
        public void PostCourse(EdFiCourse course)
        {
            PostCourseWithHttpInfo(course);
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="course">The JSON representation of the \&quot;course\&quot; resource to be created or updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdFi.Roster.Sdk.Client.ApiResponse<Object> PostCourseWithHttpInfo(EdFiCourse course)
        {
            // verify the required parameter 'course' is set
            if (course == null)
                throw new EdFi.Roster.Sdk.Client.ApiException(400, "Missing required parameter 'course' when calling CoursesApi->PostCourse");

            EdFi.Roster.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.Roster.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = course;

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/ed-fi/courses", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCourse", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="course">The JSON representation of the \&quot;course\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCourseAsync(EdFiCourse course, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCourseWithHttpInfoAsync(course, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="course">The JSON representation of the \&quot;course\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdFi.Roster.Sdk.Client.ApiResponse<Object>> PostCourseWithHttpInfoAsync(EdFiCourse course, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'course' is set
            if (course == null)
                throw new EdFi.Roster.Sdk.Client.ApiException(400, "Missing required parameter 'course' when calling CoursesApi->PostCourse");


            EdFi.Roster.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.Roster.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = course;

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/ed-fi/courses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCourse", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="course">The JSON representation of the \&quot;course\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns></returns>
        public void PutCourse(string id, EdFiCourse course, string ifMatch = default(string))
        {
            PutCourseWithHttpInfo(id, course, ifMatch);
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="course">The JSON representation of the \&quot;course\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdFi.Roster.Sdk.Client.ApiResponse<Object> PutCourseWithHttpInfo(string id, EdFiCourse course, string ifMatch = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new EdFi.Roster.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling CoursesApi->PutCourse");

            // verify the required parameter 'course' is set
            if (course == null)
                throw new EdFi.Roster.Sdk.Client.ApiException(400, "Missing required parameter 'course' when calling CoursesApi->PutCourse");

            EdFi.Roster.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.Roster.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (ifMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Match", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(ifMatch)); // header parameter
            }
            localVarRequestOptions.Data = course;

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/ed-fi/courses/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCourse", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="course">The JSON representation of the \&quot;course\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutCourseAsync(string id, EdFiCourse course, string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PutCourseWithHttpInfoAsync(id, course, ifMatch, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="course">The JSON representation of the \&quot;course\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdFi.Roster.Sdk.Client.ApiResponse<Object>> PutCourseWithHttpInfoAsync(string id, EdFiCourse course, string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new EdFi.Roster.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling CoursesApi->PutCourse");

            // verify the required parameter 'course' is set
            if (course == null)
                throw new EdFi.Roster.Sdk.Client.ApiException(400, "Missing required parameter 'course' when calling CoursesApi->PutCourse");


            EdFi.Roster.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.Roster.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (ifMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Match", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(ifMatch)); // header parameter
            }
            localVarRequestOptions.Data = course;

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/ed-fi/courses/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCourse", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
