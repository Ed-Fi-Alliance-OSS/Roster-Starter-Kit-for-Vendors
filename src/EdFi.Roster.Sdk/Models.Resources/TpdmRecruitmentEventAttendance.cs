/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.Roster.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.Roster.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmRecruitmentEventAttendance
    /// </summary>
    [DataContract(Name = "tpdm_recruitmentEventAttendance")]
    public partial class TpdmRecruitmentEventAttendance : IEquatable<TpdmRecruitmentEventAttendance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmRecruitmentEventAttendance" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmRecruitmentEventAttendance() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmRecruitmentEventAttendance" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="recruitmentEventAttendeeIdentifier">The identifier for the attendee to a recuitment event. (required).</param>
        /// <param name="recruitmentEventReference">recruitmentEventReference (required).</param>
        /// <param name="applied">Indicator of whether the prospect applied for a position..</param>
        /// <param name="currentPosition">currentPosition.</param>
        /// <param name="disabilities">An unordered collection of recruitmentEventAttendanceDisabilities. The disability condition(s) that best describes an individual&#39;s impairment..</param>
        /// <param name="electronicMailAddress">The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs. (required).</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (required).</param>
        /// <param name="genderDescriptor">The gender with which a person associates..</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III)..</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino\&quot;..</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (required).</param>
        /// <param name="maidenName">The person&#39;s maiden name..</param>
        /// <param name="met">Indicator whether the person was met by a representative of the education organization..</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony..</param>
        /// <param name="notes">Additional notes about the prospect..</param>
        /// <param name="personalIdentificationDocuments">An unordered collection of recruitmentEventAttendancePersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc..</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the person..</param>
        /// <param name="preScreeningRating">The rating initially assigned to the prospect prior to an official screening..</param>
        /// <param name="races">An unordered collection of recruitmentEventAttendanceRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races..</param>
        /// <param name="recruitmentEventAttendeeQualifications">recruitmentEventAttendeeQualifications.</param>
        /// <param name="recruitmentEventAttendeeTypeDescriptor">Reflects the type of prospect, such as EPP Applicant, Hire, or Mentor Teacher..</param>
        /// <param name="referral">Indicator of whether the prospect was a referral..</param>
        /// <param name="referredBy">The person making the referral..</param>
        /// <param name="sexDescriptor">A person&#39;s gender..</param>
        /// <param name="socialMediaNetworkName">The social media network name (e.g., LinkedIn, Twitter, etc.) associated with the SocialMediaUserName..</param>
        /// <param name="socialMediaUserName">The user name of the person on social media..</param>
        /// <param name="telephones">An unordered collection of recruitmentEventAttendanceTelephones. The 10-digit telephone number, including the area code, for the person..</param>
        /// <param name="touchpoints">An unordered collection of recruitmentEventAttendanceTouchpoints. Content associated with different touchpoints with the prospect..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmRecruitmentEventAttendance(string id = default(string), string recruitmentEventAttendeeIdentifier = default(string), TpdmRecruitmentEventReference recruitmentEventReference = default(TpdmRecruitmentEventReference), bool applied = default(bool), TpdmRecruitmentEventAttendanceCurrentPosition currentPosition = default(TpdmRecruitmentEventAttendanceCurrentPosition), List<TpdmRecruitmentEventAttendanceDisability> disabilities = default(List<TpdmRecruitmentEventAttendanceDisability>), string electronicMailAddress = default(string), string firstName = default(string), string genderDescriptor = default(string), string generationCodeSuffix = default(string), bool hispanicLatinoEthnicity = default(bool), string lastSurname = default(string), string maidenName = default(string), bool met = default(bool), string middleName = default(string), string notes = default(string), List<TpdmRecruitmentEventAttendancePersonalIdentificationDocument> personalIdentificationDocuments = default(List<TpdmRecruitmentEventAttendancePersonalIdentificationDocument>), string personalTitlePrefix = default(string), int preScreeningRating = default(int), List<TpdmRecruitmentEventAttendanceRace> races = default(List<TpdmRecruitmentEventAttendanceRace>), TpdmRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications recruitmentEventAttendeeQualifications = default(TpdmRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications), string recruitmentEventAttendeeTypeDescriptor = default(string), bool referral = default(bool), string referredBy = default(string), string sexDescriptor = default(string), string socialMediaNetworkName = default(string), string socialMediaUserName = default(string), List<TpdmRecruitmentEventAttendanceTelephone> telephones = default(List<TpdmRecruitmentEventAttendanceTelephone>), List<TpdmRecruitmentEventAttendanceTouchpoint> touchpoints = default(List<TpdmRecruitmentEventAttendanceTouchpoint>), string etag = default(string))
        {
            // to ensure "recruitmentEventAttendeeIdentifier" is required (not null)
            this.RecruitmentEventAttendeeIdentifier = recruitmentEventAttendeeIdentifier ?? throw new ArgumentNullException("recruitmentEventAttendeeIdentifier is a required property for TpdmRecruitmentEventAttendance and cannot be null");
            // to ensure "recruitmentEventReference" is required (not null)
            this.RecruitmentEventReference = recruitmentEventReference ?? throw new ArgumentNullException("recruitmentEventReference is a required property for TpdmRecruitmentEventAttendance and cannot be null");
            // to ensure "electronicMailAddress" is required (not null)
            this.ElectronicMailAddress = electronicMailAddress ?? throw new ArgumentNullException("electronicMailAddress is a required property for TpdmRecruitmentEventAttendance and cannot be null");
            // to ensure "firstName" is required (not null)
            this.FirstName = firstName ?? throw new ArgumentNullException("firstName is a required property for TpdmRecruitmentEventAttendance and cannot be null");
            // to ensure "lastSurname" is required (not null)
            this.LastSurname = lastSurname ?? throw new ArgumentNullException("lastSurname is a required property for TpdmRecruitmentEventAttendance and cannot be null");
            this.Id = id;
            this.Applied = applied;
            this.CurrentPosition = currentPosition;
            this.Disabilities = disabilities;
            this.GenderDescriptor = genderDescriptor;
            this.GenerationCodeSuffix = generationCodeSuffix;
            this.HispanicLatinoEthnicity = hispanicLatinoEthnicity;
            this.MaidenName = maidenName;
            this.Met = met;
            this.MiddleName = middleName;
            this.Notes = notes;
            this.PersonalIdentificationDocuments = personalIdentificationDocuments;
            this.PersonalTitlePrefix = personalTitlePrefix;
            this.PreScreeningRating = preScreeningRating;
            this.Races = races;
            this.RecruitmentEventAttendeeQualifications = recruitmentEventAttendeeQualifications;
            this.RecruitmentEventAttendeeTypeDescriptor = recruitmentEventAttendeeTypeDescriptor;
            this.Referral = referral;
            this.ReferredBy = referredBy;
            this.SexDescriptor = sexDescriptor;
            this.SocialMediaNetworkName = socialMediaNetworkName;
            this.SocialMediaUserName = socialMediaUserName;
            this.Telephones = telephones;
            this.Touchpoints = touchpoints;
            this.Etag = etag;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The identifier for the attendee to a recuitment event.
        /// </summary>
        /// <value>The identifier for the attendee to a recuitment event.</value>
        [DataMember(Name = "recruitmentEventAttendeeIdentifier", IsRequired = true, EmitDefaultValue = false)]
        public string RecruitmentEventAttendeeIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets RecruitmentEventReference
        /// </summary>
        [DataMember(Name = "recruitmentEventReference", IsRequired = true, EmitDefaultValue = false)]
        public TpdmRecruitmentEventReference RecruitmentEventReference { get; set; }

        /// <summary>
        /// Indicator of whether the prospect applied for a position.
        /// </summary>
        /// <value>Indicator of whether the prospect applied for a position.</value>
        [DataMember(Name = "applied", EmitDefaultValue = true)]
        public bool Applied { get; set; }

        /// <summary>
        /// Gets or Sets CurrentPosition
        /// </summary>
        [DataMember(Name = "currentPosition", EmitDefaultValue = false)]
        public TpdmRecruitmentEventAttendanceCurrentPosition CurrentPosition { get; set; }

        /// <summary>
        /// An unordered collection of recruitmentEventAttendanceDisabilities. The disability condition(s) that best describes an individual&#39;s impairment.
        /// </summary>
        /// <value>An unordered collection of recruitmentEventAttendanceDisabilities. The disability condition(s) that best describes an individual&#39;s impairment.</value>
        [DataMember(Name = "disabilities", EmitDefaultValue = false)]
        public List<TpdmRecruitmentEventAttendanceDisability> Disabilities { get; set; }

        /// <summary>
        /// The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.
        /// </summary>
        /// <value>The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.</value>
        [DataMember(Name = "electronicMailAddress", IsRequired = true, EmitDefaultValue = false)]
        public string ElectronicMailAddress { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        /// <value>A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.</value>
        [DataMember(Name = "firstName", IsRequired = true, EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The gender with which a person associates.
        /// </summary>
        /// <value>The gender with which a person associates.</value>
        [DataMember(Name = "genderDescriptor", EmitDefaultValue = false)]
        public string GenderDescriptor { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        /// <value>An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).</value>
        [DataMember(Name = "generationCodeSuffix", EmitDefaultValue = false)]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino\&quot;.
        /// </summary>
        /// <value>An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino\&quot;.</value>
        [DataMember(Name = "hispanicLatinoEthnicity", EmitDefaultValue = true)]
        public bool HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        /// <value>The name borne in common by members of a family.</value>
        [DataMember(Name = "lastSurname", IsRequired = true, EmitDefaultValue = false)]
        public string LastSurname { get; set; }

        /// <summary>
        /// The person&#39;s maiden name.
        /// </summary>
        /// <value>The person&#39;s maiden name.</value>
        [DataMember(Name = "maidenName", EmitDefaultValue = false)]
        public string MaidenName { get; set; }

        /// <summary>
        /// Indicator whether the person was met by a representative of the education organization.
        /// </summary>
        /// <value>Indicator whether the person was met by a representative of the education organization.</value>
        [DataMember(Name = "met", EmitDefaultValue = true)]
        public bool Met { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        /// <value>A secondary name given to an individual at birth, baptism, or during another naming ceremony.</value>
        [DataMember(Name = "middleName", EmitDefaultValue = false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Additional notes about the prospect.
        /// </summary>
        /// <value>Additional notes about the prospect.</value>
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public string Notes { get; set; }

        /// <summary>
        /// An unordered collection of recruitmentEventAttendancePersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.
        /// </summary>
        /// <value>An unordered collection of recruitmentEventAttendancePersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.</value>
        [DataMember(Name = "personalIdentificationDocuments", EmitDefaultValue = false)]
        public List<TpdmRecruitmentEventAttendancePersonalIdentificationDocument> PersonalIdentificationDocuments { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        /// <value>A prefix used to denote the title, degree, position, or seniority of the person.</value>
        [DataMember(Name = "personalTitlePrefix", EmitDefaultValue = false)]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// The rating initially assigned to the prospect prior to an official screening.
        /// </summary>
        /// <value>The rating initially assigned to the prospect prior to an official screening.</value>
        [DataMember(Name = "preScreeningRating", EmitDefaultValue = false)]
        public int PreScreeningRating { get; set; }

        /// <summary>
        /// An unordered collection of recruitmentEventAttendanceRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.
        /// </summary>
        /// <value>An unordered collection of recruitmentEventAttendanceRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.</value>
        [DataMember(Name = "races", EmitDefaultValue = false)]
        public List<TpdmRecruitmentEventAttendanceRace> Races { get; set; }

        /// <summary>
        /// Gets or Sets RecruitmentEventAttendeeQualifications
        /// </summary>
        [DataMember(Name = "recruitmentEventAttendeeQualifications", EmitDefaultValue = false)]
        public TpdmRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications RecruitmentEventAttendeeQualifications { get; set; }

        /// <summary>
        /// Reflects the type of prospect, such as EPP Applicant, Hire, or Mentor Teacher.
        /// </summary>
        /// <value>Reflects the type of prospect, such as EPP Applicant, Hire, or Mentor Teacher.</value>
        [DataMember(Name = "recruitmentEventAttendeeTypeDescriptor", EmitDefaultValue = false)]
        public string RecruitmentEventAttendeeTypeDescriptor { get; set; }

        /// <summary>
        /// Indicator of whether the prospect was a referral.
        /// </summary>
        /// <value>Indicator of whether the prospect was a referral.</value>
        [DataMember(Name = "referral", EmitDefaultValue = true)]
        public bool Referral { get; set; }

        /// <summary>
        /// The person making the referral.
        /// </summary>
        /// <value>The person making the referral.</value>
        [DataMember(Name = "referredBy", EmitDefaultValue = false)]
        public string ReferredBy { get; set; }

        /// <summary>
        /// A person&#39;s gender.
        /// </summary>
        /// <value>A person&#39;s gender.</value>
        [DataMember(Name = "sexDescriptor", EmitDefaultValue = false)]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// The social media network name (e.g., LinkedIn, Twitter, etc.) associated with the SocialMediaUserName.
        /// </summary>
        /// <value>The social media network name (e.g., LinkedIn, Twitter, etc.) associated with the SocialMediaUserName.</value>
        [DataMember(Name = "socialMediaNetworkName", EmitDefaultValue = false)]
        public string SocialMediaNetworkName { get; set; }

        /// <summary>
        /// The user name of the person on social media.
        /// </summary>
        /// <value>The user name of the person on social media.</value>
        [DataMember(Name = "socialMediaUserName", EmitDefaultValue = false)]
        public string SocialMediaUserName { get; set; }

        /// <summary>
        /// An unordered collection of recruitmentEventAttendanceTelephones. The 10-digit telephone number, including the area code, for the person.
        /// </summary>
        /// <value>An unordered collection of recruitmentEventAttendanceTelephones. The 10-digit telephone number, including the area code, for the person.</value>
        [DataMember(Name = "telephones", EmitDefaultValue = false)]
        public List<TpdmRecruitmentEventAttendanceTelephone> Telephones { get; set; }

        /// <summary>
        /// An unordered collection of recruitmentEventAttendanceTouchpoints. Content associated with different touchpoints with the prospect.
        /// </summary>
        /// <value>An unordered collection of recruitmentEventAttendanceTouchpoints. Content associated with different touchpoints with the prospect.</value>
        [DataMember(Name = "touchpoints", EmitDefaultValue = false)]
        public List<TpdmRecruitmentEventAttendanceTouchpoint> Touchpoints { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmRecruitmentEventAttendance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RecruitmentEventAttendeeIdentifier: ").Append(RecruitmentEventAttendeeIdentifier).Append("\n");
            sb.Append("  RecruitmentEventReference: ").Append(RecruitmentEventReference).Append("\n");
            sb.Append("  Applied: ").Append(Applied).Append("\n");
            sb.Append("  CurrentPosition: ").Append(CurrentPosition).Append("\n");
            sb.Append("  Disabilities: ").Append(Disabilities).Append("\n");
            sb.Append("  ElectronicMailAddress: ").Append(ElectronicMailAddress).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  GenderDescriptor: ").Append(GenderDescriptor).Append("\n");
            sb.Append("  GenerationCodeSuffix: ").Append(GenerationCodeSuffix).Append("\n");
            sb.Append("  HispanicLatinoEthnicity: ").Append(HispanicLatinoEthnicity).Append("\n");
            sb.Append("  LastSurname: ").Append(LastSurname).Append("\n");
            sb.Append("  MaidenName: ").Append(MaidenName).Append("\n");
            sb.Append("  Met: ").Append(Met).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  PersonalIdentificationDocuments: ").Append(PersonalIdentificationDocuments).Append("\n");
            sb.Append("  PersonalTitlePrefix: ").Append(PersonalTitlePrefix).Append("\n");
            sb.Append("  PreScreeningRating: ").Append(PreScreeningRating).Append("\n");
            sb.Append("  Races: ").Append(Races).Append("\n");
            sb.Append("  RecruitmentEventAttendeeQualifications: ").Append(RecruitmentEventAttendeeQualifications).Append("\n");
            sb.Append("  RecruitmentEventAttendeeTypeDescriptor: ").Append(RecruitmentEventAttendeeTypeDescriptor).Append("\n");
            sb.Append("  Referral: ").Append(Referral).Append("\n");
            sb.Append("  ReferredBy: ").Append(ReferredBy).Append("\n");
            sb.Append("  SexDescriptor: ").Append(SexDescriptor).Append("\n");
            sb.Append("  SocialMediaNetworkName: ").Append(SocialMediaNetworkName).Append("\n");
            sb.Append("  SocialMediaUserName: ").Append(SocialMediaUserName).Append("\n");
            sb.Append("  Telephones: ").Append(Telephones).Append("\n");
            sb.Append("  Touchpoints: ").Append(Touchpoints).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmRecruitmentEventAttendance);
        }

        /// <summary>
        /// Returns true if TpdmRecruitmentEventAttendance instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmRecruitmentEventAttendance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmRecruitmentEventAttendance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.RecruitmentEventAttendeeIdentifier == input.RecruitmentEventAttendeeIdentifier ||
                    (this.RecruitmentEventAttendeeIdentifier != null &&
                    this.RecruitmentEventAttendeeIdentifier.Equals(input.RecruitmentEventAttendeeIdentifier))
                ) && 
                (
                    this.RecruitmentEventReference == input.RecruitmentEventReference ||
                    (this.RecruitmentEventReference != null &&
                    this.RecruitmentEventReference.Equals(input.RecruitmentEventReference))
                ) && 
                (
                    this.Applied == input.Applied ||
                    this.Applied.Equals(input.Applied)
                ) && 
                (
                    this.CurrentPosition == input.CurrentPosition ||
                    (this.CurrentPosition != null &&
                    this.CurrentPosition.Equals(input.CurrentPosition))
                ) && 
                (
                    this.Disabilities == input.Disabilities ||
                    this.Disabilities != null &&
                    input.Disabilities != null &&
                    this.Disabilities.SequenceEqual(input.Disabilities)
                ) && 
                (
                    this.ElectronicMailAddress == input.ElectronicMailAddress ||
                    (this.ElectronicMailAddress != null &&
                    this.ElectronicMailAddress.Equals(input.ElectronicMailAddress))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.GenderDescriptor == input.GenderDescriptor ||
                    (this.GenderDescriptor != null &&
                    this.GenderDescriptor.Equals(input.GenderDescriptor))
                ) && 
                (
                    this.GenerationCodeSuffix == input.GenerationCodeSuffix ||
                    (this.GenerationCodeSuffix != null &&
                    this.GenerationCodeSuffix.Equals(input.GenerationCodeSuffix))
                ) && 
                (
                    this.HispanicLatinoEthnicity == input.HispanicLatinoEthnicity ||
                    this.HispanicLatinoEthnicity.Equals(input.HispanicLatinoEthnicity)
                ) && 
                (
                    this.LastSurname == input.LastSurname ||
                    (this.LastSurname != null &&
                    this.LastSurname.Equals(input.LastSurname))
                ) && 
                (
                    this.MaidenName == input.MaidenName ||
                    (this.MaidenName != null &&
                    this.MaidenName.Equals(input.MaidenName))
                ) && 
                (
                    this.Met == input.Met ||
                    this.Met.Equals(input.Met)
                ) && 
                (
                    this.MiddleName == input.MiddleName ||
                    (this.MiddleName != null &&
                    this.MiddleName.Equals(input.MiddleName))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.PersonalIdentificationDocuments == input.PersonalIdentificationDocuments ||
                    this.PersonalIdentificationDocuments != null &&
                    input.PersonalIdentificationDocuments != null &&
                    this.PersonalIdentificationDocuments.SequenceEqual(input.PersonalIdentificationDocuments)
                ) && 
                (
                    this.PersonalTitlePrefix == input.PersonalTitlePrefix ||
                    (this.PersonalTitlePrefix != null &&
                    this.PersonalTitlePrefix.Equals(input.PersonalTitlePrefix))
                ) && 
                (
                    this.PreScreeningRating == input.PreScreeningRating ||
                    this.PreScreeningRating.Equals(input.PreScreeningRating)
                ) && 
                (
                    this.Races == input.Races ||
                    this.Races != null &&
                    input.Races != null &&
                    this.Races.SequenceEqual(input.Races)
                ) && 
                (
                    this.RecruitmentEventAttendeeQualifications == input.RecruitmentEventAttendeeQualifications ||
                    (this.RecruitmentEventAttendeeQualifications != null &&
                    this.RecruitmentEventAttendeeQualifications.Equals(input.RecruitmentEventAttendeeQualifications))
                ) && 
                (
                    this.RecruitmentEventAttendeeTypeDescriptor == input.RecruitmentEventAttendeeTypeDescriptor ||
                    (this.RecruitmentEventAttendeeTypeDescriptor != null &&
                    this.RecruitmentEventAttendeeTypeDescriptor.Equals(input.RecruitmentEventAttendeeTypeDescriptor))
                ) && 
                (
                    this.Referral == input.Referral ||
                    this.Referral.Equals(input.Referral)
                ) && 
                (
                    this.ReferredBy == input.ReferredBy ||
                    (this.ReferredBy != null &&
                    this.ReferredBy.Equals(input.ReferredBy))
                ) && 
                (
                    this.SexDescriptor == input.SexDescriptor ||
                    (this.SexDescriptor != null &&
                    this.SexDescriptor.Equals(input.SexDescriptor))
                ) && 
                (
                    this.SocialMediaNetworkName == input.SocialMediaNetworkName ||
                    (this.SocialMediaNetworkName != null &&
                    this.SocialMediaNetworkName.Equals(input.SocialMediaNetworkName))
                ) && 
                (
                    this.SocialMediaUserName == input.SocialMediaUserName ||
                    (this.SocialMediaUserName != null &&
                    this.SocialMediaUserName.Equals(input.SocialMediaUserName))
                ) && 
                (
                    this.Telephones == input.Telephones ||
                    this.Telephones != null &&
                    input.Telephones != null &&
                    this.Telephones.SequenceEqual(input.Telephones)
                ) && 
                (
                    this.Touchpoints == input.Touchpoints ||
                    this.Touchpoints != null &&
                    input.Touchpoints != null &&
                    this.Touchpoints.SequenceEqual(input.Touchpoints)
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.RecruitmentEventAttendeeIdentifier != null)
                    hashCode = hashCode * 59 + this.RecruitmentEventAttendeeIdentifier.GetHashCode();
                if (this.RecruitmentEventReference != null)
                    hashCode = hashCode * 59 + this.RecruitmentEventReference.GetHashCode();
                hashCode = hashCode * 59 + this.Applied.GetHashCode();
                if (this.CurrentPosition != null)
                    hashCode = hashCode * 59 + this.CurrentPosition.GetHashCode();
                if (this.Disabilities != null)
                    hashCode = hashCode * 59 + this.Disabilities.GetHashCode();
                if (this.ElectronicMailAddress != null)
                    hashCode = hashCode * 59 + this.ElectronicMailAddress.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.GenderDescriptor != null)
                    hashCode = hashCode * 59 + this.GenderDescriptor.GetHashCode();
                if (this.GenerationCodeSuffix != null)
                    hashCode = hashCode * 59 + this.GenerationCodeSuffix.GetHashCode();
                hashCode = hashCode * 59 + this.HispanicLatinoEthnicity.GetHashCode();
                if (this.LastSurname != null)
                    hashCode = hashCode * 59 + this.LastSurname.GetHashCode();
                if (this.MaidenName != null)
                    hashCode = hashCode * 59 + this.MaidenName.GetHashCode();
                hashCode = hashCode * 59 + this.Met.GetHashCode();
                if (this.MiddleName != null)
                    hashCode = hashCode * 59 + this.MiddleName.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.PersonalIdentificationDocuments != null)
                    hashCode = hashCode * 59 + this.PersonalIdentificationDocuments.GetHashCode();
                if (this.PersonalTitlePrefix != null)
                    hashCode = hashCode * 59 + this.PersonalTitlePrefix.GetHashCode();
                hashCode = hashCode * 59 + this.PreScreeningRating.GetHashCode();
                if (this.Races != null)
                    hashCode = hashCode * 59 + this.Races.GetHashCode();
                if (this.RecruitmentEventAttendeeQualifications != null)
                    hashCode = hashCode * 59 + this.RecruitmentEventAttendeeQualifications.GetHashCode();
                if (this.RecruitmentEventAttendeeTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.RecruitmentEventAttendeeTypeDescriptor.GetHashCode();
                hashCode = hashCode * 59 + this.Referral.GetHashCode();
                if (this.ReferredBy != null)
                    hashCode = hashCode * 59 + this.ReferredBy.GetHashCode();
                if (this.SexDescriptor != null)
                    hashCode = hashCode * 59 + this.SexDescriptor.GetHashCode();
                if (this.SocialMediaNetworkName != null)
                    hashCode = hashCode * 59 + this.SocialMediaNetworkName.GetHashCode();
                if (this.SocialMediaUserName != null)
                    hashCode = hashCode * 59 + this.SocialMediaUserName.GetHashCode();
                if (this.Telephones != null)
                    hashCode = hashCode * 59 + this.Telephones.GetHashCode();
                if (this.Touchpoints != null)
                    hashCode = hashCode * 59 + this.Touchpoints.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RecruitmentEventAttendeeIdentifier (string) maxLength
            if(this.RecruitmentEventAttendeeIdentifier != null && this.RecruitmentEventAttendeeIdentifier.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RecruitmentEventAttendeeIdentifier, length must be less than 32.", new [] { "RecruitmentEventAttendeeIdentifier" });
            }

            // ElectronicMailAddress (string) maxLength
            if(this.ElectronicMailAddress != null && this.ElectronicMailAddress.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ElectronicMailAddress, length must be less than 128.", new [] { "ElectronicMailAddress" });
            }

            // FirstName (string) maxLength
            if(this.FirstName != null && this.FirstName.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 75.", new [] { "FirstName" });
            }

            // GenderDescriptor (string) maxLength
            if(this.GenderDescriptor != null && this.GenderDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GenderDescriptor, length must be less than 306.", new [] { "GenderDescriptor" });
            }

            // GenerationCodeSuffix (string) maxLength
            if(this.GenerationCodeSuffix != null && this.GenerationCodeSuffix.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GenerationCodeSuffix, length must be less than 10.", new [] { "GenerationCodeSuffix" });
            }

            // LastSurname (string) maxLength
            if(this.LastSurname != null && this.LastSurname.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastSurname, length must be less than 75.", new [] { "LastSurname" });
            }

            // MaidenName (string) maxLength
            if(this.MaidenName != null && this.MaidenName.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaidenName, length must be less than 75.", new [] { "MaidenName" });
            }

            // MiddleName (string) maxLength
            if(this.MiddleName != null && this.MiddleName.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MiddleName, length must be less than 75.", new [] { "MiddleName" });
            }

            // Notes (string) maxLength
            if(this.Notes != null && this.Notes.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Notes, length must be less than 255.", new [] { "Notes" });
            }

            // PersonalTitlePrefix (string) maxLength
            if(this.PersonalTitlePrefix != null && this.PersonalTitlePrefix.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PersonalTitlePrefix, length must be less than 30.", new [] { "PersonalTitlePrefix" });
            }

            // RecruitmentEventAttendeeTypeDescriptor (string) maxLength
            if(this.RecruitmentEventAttendeeTypeDescriptor != null && this.RecruitmentEventAttendeeTypeDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RecruitmentEventAttendeeTypeDescriptor, length must be less than 306.", new [] { "RecruitmentEventAttendeeTypeDescriptor" });
            }

            // ReferredBy (string) maxLength
            if(this.ReferredBy != null && this.ReferredBy.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReferredBy, length must be less than 50.", new [] { "ReferredBy" });
            }

            // SexDescriptor (string) maxLength
            if(this.SexDescriptor != null && this.SexDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SexDescriptor, length must be less than 306.", new [] { "SexDescriptor" });
            }

            // SocialMediaNetworkName (string) maxLength
            if(this.SocialMediaNetworkName != null && this.SocialMediaNetworkName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SocialMediaNetworkName, length must be less than 50.", new [] { "SocialMediaNetworkName" });
            }

            // SocialMediaUserName (string) maxLength
            if(this.SocialMediaUserName != null && this.SocialMediaUserName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SocialMediaUserName, length must be less than 50.", new [] { "SocialMediaUserName" });
            }

            yield break;
        }
    }

}
