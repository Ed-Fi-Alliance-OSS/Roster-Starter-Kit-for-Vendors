/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EdFi.Roster.Sdk.Client;
using EdFi.Roster.Sdk.Models.EnrollmentComposites;

namespace EdFi.Roster.Sdk.Api.EnrollmentComposites
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStaffsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;Staff&gt;</returns>
        List<Staff> GetStaffs(int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;Staff&gt;</returns>
        ApiResponse<List<Staff>> GetStaffsWithHttpInfo(int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string));
        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>Staff</returns>
        Staff GetStaffsById(string id, string ifNoneMatch = default(string), string fields = default(string), string snapshotIdentifier = default(string));

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of Staff</returns>
        ApiResponse<Staff> GetStaffsByIdWithHttpInfo(string id, string ifNoneMatch = default(string), string fields = default(string), string snapshotIdentifier = default(string));
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;Staff&gt;</returns>
        List<Staff> GetStaffsByLocalEducationAgency(string localEducationAgencyId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;Staff&gt;</returns>
        ApiResponse<List<Staff>> GetStaffsByLocalEducationAgencyWithHttpInfo(string localEducationAgencyId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string));
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;Staff&gt;</returns>
        List<Staff> GetStaffsBySchool(string schoolId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;Staff&gt;</returns>
        ApiResponse<List<Staff>> GetStaffsBySchoolWithHttpInfo(string schoolId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string));
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;Staff&gt;</returns>
        List<Staff> GetStaffsBySection(string sectionId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;Staff&gt;</returns>
        ApiResponse<List<Staff>> GetStaffsBySectionWithHttpInfo(string sectionId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string));
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;Staff&gt;</returns>
        List<Staff> GetStaffsByStudent(string studentId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;Staff&gt;</returns>
        ApiResponse<List<Staff>> GetStaffsByStudentWithHttpInfo(string studentId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStaffsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Staff&gt;</returns>
        System.Threading.Tasks.Task<List<Staff>> GetStaffsAsync(int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Staff&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Staff>>> GetStaffsWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Staff</returns>
        System.Threading.Tasks.Task<Staff> GetStaffsByIdAsync(string id, string ifNoneMatch = default(string), string fields = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Staff)</returns>
        System.Threading.Tasks.Task<ApiResponse<Staff>> GetStaffsByIdWithHttpInfoAsync(string id, string ifNoneMatch = default(string), string fields = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Staff&gt;</returns>
        System.Threading.Tasks.Task<List<Staff>> GetStaffsByLocalEducationAgencyAsync(string localEducationAgencyId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Staff&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Staff>>> GetStaffsByLocalEducationAgencyWithHttpInfoAsync(string localEducationAgencyId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Staff&gt;</returns>
        System.Threading.Tasks.Task<List<Staff>> GetStaffsBySchoolAsync(string schoolId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Staff&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Staff>>> GetStaffsBySchoolWithHttpInfoAsync(string schoolId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Staff&gt;</returns>
        System.Threading.Tasks.Task<List<Staff>> GetStaffsBySectionAsync(string sectionId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Staff&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Staff>>> GetStaffsBySectionWithHttpInfoAsync(string sectionId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Staff&gt;</returns>
        System.Threading.Tasks.Task<List<Staff>> GetStaffsByStudentAsync(string studentId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Staff&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Staff>>> GetStaffsByStudentWithHttpInfoAsync(string studentId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStaffsApi : IStaffsApiSync, IStaffsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StaffsApi : IStaffsApi
    {
        private EdFi.Roster.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StaffsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StaffsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StaffsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StaffsApi(String basePath)
        {
            this.Configuration = EdFi.Roster.Sdk.Client.Configuration.MergeConfigurations(
                EdFi.Roster.Sdk.Client.GlobalConfiguration.Instance,
                new EdFi.Roster.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EdFi.Roster.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdFi.Roster.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EdFi.Roster.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StaffsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StaffsApi(EdFi.Roster.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EdFi.Roster.Sdk.Client.Configuration.MergeConfigurations(
                EdFi.Roster.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EdFi.Roster.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdFi.Roster.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EdFi.Roster.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StaffsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public StaffsApi(EdFi.Roster.Sdk.Client.ISynchronousClient client, EdFi.Roster.Sdk.Client.IAsynchronousClient asyncClient, EdFi.Roster.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EdFi.Roster.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EdFi.Roster.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EdFi.Roster.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EdFi.Roster.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EdFi.Roster.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;Staff&gt;</returns>
        public List<Staff> GetStaffs(int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string))
        {
            EdFi.Roster.Sdk.Client.ApiResponse<List<Staff>> localVarResponse = GetStaffsWithHttpInfo(offset, limit, fields, q, snapshotIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;Staff&gt;</returns>
        public EdFi.Roster.Sdk.Client.ApiResponse<List<Staff>> GetStaffsWithHttpInfo(int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string))
        {
            EdFi.Roster.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.Roster.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Staff>>("/ed-fi/enrollment/Staffs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStaffs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Staff&gt;</returns>
        public async System.Threading.Tasks.Task<List<Staff>> GetStaffsAsync(int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdFi.Roster.Sdk.Client.ApiResponse<List<Staff>> localVarResponse = await GetStaffsWithHttpInfoAsync(offset, limit, fields, q, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Staff&gt;)</returns>
        public async System.Threading.Tasks.Task<EdFi.Roster.Sdk.Client.ApiResponse<List<Staff>>> GetStaffsWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdFi.Roster.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.Roster.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Staff>>("/ed-fi/enrollment/Staffs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStaffs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>Staff</returns>
        public Staff GetStaffsById(string id, string ifNoneMatch = default(string), string fields = default(string), string snapshotIdentifier = default(string))
        {
            EdFi.Roster.Sdk.Client.ApiResponse<Staff> localVarResponse = GetStaffsByIdWithHttpInfo(id, ifNoneMatch, fields, snapshotIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of Staff</returns>
        public EdFi.Roster.Sdk.Client.ApiResponse<Staff> GetStaffsByIdWithHttpInfo(string id, string ifNoneMatch = default(string), string fields = default(string), string snapshotIdentifier = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new EdFi.Roster.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling StaffsApi->GetStaffsById");

            EdFi.Roster.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.Roster.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Staff>("/ed-fi/enrollment/Staffs/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStaffsById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Staff</returns>
        public async System.Threading.Tasks.Task<Staff> GetStaffsByIdAsync(string id, string ifNoneMatch = default(string), string fields = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdFi.Roster.Sdk.Client.ApiResponse<Staff> localVarResponse = await GetStaffsByIdWithHttpInfoAsync(id, ifNoneMatch, fields, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Staff)</returns>
        public async System.Threading.Tasks.Task<EdFi.Roster.Sdk.Client.ApiResponse<Staff>> GetStaffsByIdWithHttpInfoAsync(string id, string ifNoneMatch = default(string), string fields = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new EdFi.Roster.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling StaffsApi->GetStaffsById");


            EdFi.Roster.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.Roster.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Staff>("/ed-fi/enrollment/Staffs/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStaffsById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;Staff&gt;</returns>
        public List<Staff> GetStaffsByLocalEducationAgency(string localEducationAgencyId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string))
        {
            EdFi.Roster.Sdk.Client.ApiResponse<List<Staff>> localVarResponse = GetStaffsByLocalEducationAgencyWithHttpInfo(localEducationAgencyId, offset, limit, fields, q, snapshotIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;Staff&gt;</returns>
        public EdFi.Roster.Sdk.Client.ApiResponse<List<Staff>> GetStaffsByLocalEducationAgencyWithHttpInfo(string localEducationAgencyId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string))
        {
            // verify the required parameter 'localEducationAgencyId' is set
            if (localEducationAgencyId == null)
                throw new EdFi.Roster.Sdk.Client.ApiException(400, "Missing required parameter 'localEducationAgencyId' when calling StaffsApi->GetStaffsByLocalEducationAgency");

            EdFi.Roster.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.Roster.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("localEducationAgency_id", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(localEducationAgencyId)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Staff>>("/ed-fi/enrollment/localEducationAgencies/{localEducationAgency_id}/staffs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStaffsByLocalEducationAgency", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Staff&gt;</returns>
        public async System.Threading.Tasks.Task<List<Staff>> GetStaffsByLocalEducationAgencyAsync(string localEducationAgencyId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdFi.Roster.Sdk.Client.ApiResponse<List<Staff>> localVarResponse = await GetStaffsByLocalEducationAgencyWithHttpInfoAsync(localEducationAgencyId, offset, limit, fields, q, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Staff&gt;)</returns>
        public async System.Threading.Tasks.Task<EdFi.Roster.Sdk.Client.ApiResponse<List<Staff>>> GetStaffsByLocalEducationAgencyWithHttpInfoAsync(string localEducationAgencyId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'localEducationAgencyId' is set
            if (localEducationAgencyId == null)
                throw new EdFi.Roster.Sdk.Client.ApiException(400, "Missing required parameter 'localEducationAgencyId' when calling StaffsApi->GetStaffsByLocalEducationAgency");


            EdFi.Roster.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.Roster.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("localEducationAgency_id", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(localEducationAgencyId)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Staff>>("/ed-fi/enrollment/localEducationAgencies/{localEducationAgency_id}/staffs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStaffsByLocalEducationAgency", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;Staff&gt;</returns>
        public List<Staff> GetStaffsBySchool(string schoolId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string))
        {
            EdFi.Roster.Sdk.Client.ApiResponse<List<Staff>> localVarResponse = GetStaffsBySchoolWithHttpInfo(schoolId, offset, limit, fields, q, snapshotIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;Staff&gt;</returns>
        public EdFi.Roster.Sdk.Client.ApiResponse<List<Staff>> GetStaffsBySchoolWithHttpInfo(string schoolId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string))
        {
            // verify the required parameter 'schoolId' is set
            if (schoolId == null)
                throw new EdFi.Roster.Sdk.Client.ApiException(400, "Missing required parameter 'schoolId' when calling StaffsApi->GetStaffsBySchool");

            EdFi.Roster.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.Roster.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("school_id", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(schoolId)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Staff>>("/ed-fi/enrollment/schools/{school_id}/staffs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStaffsBySchool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Staff&gt;</returns>
        public async System.Threading.Tasks.Task<List<Staff>> GetStaffsBySchoolAsync(string schoolId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdFi.Roster.Sdk.Client.ApiResponse<List<Staff>> localVarResponse = await GetStaffsBySchoolWithHttpInfoAsync(schoolId, offset, limit, fields, q, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Staff&gt;)</returns>
        public async System.Threading.Tasks.Task<EdFi.Roster.Sdk.Client.ApiResponse<List<Staff>>> GetStaffsBySchoolWithHttpInfoAsync(string schoolId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'schoolId' is set
            if (schoolId == null)
                throw new EdFi.Roster.Sdk.Client.ApiException(400, "Missing required parameter 'schoolId' when calling StaffsApi->GetStaffsBySchool");


            EdFi.Roster.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.Roster.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("school_id", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(schoolId)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Staff>>("/ed-fi/enrollment/schools/{school_id}/staffs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStaffsBySchool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;Staff&gt;</returns>
        public List<Staff> GetStaffsBySection(string sectionId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string))
        {
            EdFi.Roster.Sdk.Client.ApiResponse<List<Staff>> localVarResponse = GetStaffsBySectionWithHttpInfo(sectionId, offset, limit, fields, q, snapshotIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;Staff&gt;</returns>
        public EdFi.Roster.Sdk.Client.ApiResponse<List<Staff>> GetStaffsBySectionWithHttpInfo(string sectionId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string))
        {
            // verify the required parameter 'sectionId' is set
            if (sectionId == null)
                throw new EdFi.Roster.Sdk.Client.ApiException(400, "Missing required parameter 'sectionId' when calling StaffsApi->GetStaffsBySection");

            EdFi.Roster.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.Roster.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("section_id", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(sectionId)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Staff>>("/ed-fi/enrollment/sections/{section_id}/staffs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStaffsBySection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Staff&gt;</returns>
        public async System.Threading.Tasks.Task<List<Staff>> GetStaffsBySectionAsync(string sectionId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdFi.Roster.Sdk.Client.ApiResponse<List<Staff>> localVarResponse = await GetStaffsBySectionWithHttpInfoAsync(sectionId, offset, limit, fields, q, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Staff&gt;)</returns>
        public async System.Threading.Tasks.Task<EdFi.Roster.Sdk.Client.ApiResponse<List<Staff>>> GetStaffsBySectionWithHttpInfoAsync(string sectionId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sectionId' is set
            if (sectionId == null)
                throw new EdFi.Roster.Sdk.Client.ApiException(400, "Missing required parameter 'sectionId' when calling StaffsApi->GetStaffsBySection");


            EdFi.Roster.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.Roster.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("section_id", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(sectionId)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Staff>>("/ed-fi/enrollment/sections/{section_id}/staffs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStaffsBySection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;Staff&gt;</returns>
        public List<Staff> GetStaffsByStudent(string studentId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string))
        {
            EdFi.Roster.Sdk.Client.ApiResponse<List<Staff>> localVarResponse = GetStaffsByStudentWithHttpInfo(studentId, offset, limit, fields, q, snapshotIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;Staff&gt;</returns>
        public EdFi.Roster.Sdk.Client.ApiResponse<List<Staff>> GetStaffsByStudentWithHttpInfo(string studentId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string))
        {
            // verify the required parameter 'studentId' is set
            if (studentId == null)
                throw new EdFi.Roster.Sdk.Client.ApiException(400, "Missing required parameter 'studentId' when calling StaffsApi->GetStaffsByStudent");

            EdFi.Roster.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.Roster.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("student_id", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(studentId)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Staff>>("/ed-fi/enrollment/students/{student_id}/staffs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStaffsByStudent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Staff&gt;</returns>
        public async System.Threading.Tasks.Task<List<Staff>> GetStaffsByStudentAsync(string studentId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdFi.Roster.Sdk.Client.ApiResponse<List<Staff>> localVarResponse = await GetStaffsByStudentWithHttpInfoAsync(studentId, offset, limit, fields, q, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Roster.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Staff&gt;)</returns>
        public async System.Threading.Tasks.Task<EdFi.Roster.Sdk.Client.ApiResponse<List<Staff>>> GetStaffsByStudentWithHttpInfoAsync(string studentId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'studentId' is set
            if (studentId == null)
                throw new EdFi.Roster.Sdk.Client.ApiException(400, "Missing required parameter 'studentId' when calling StaffsApi->GetStaffsByStudent");


            EdFi.Roster.Sdk.Client.RequestOptions localVarRequestOptions = new EdFi.Roster.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EdFi.Roster.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("student_id", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(studentId)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Roster.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", EdFi.Roster.Sdk.Client.ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Staff>>("/ed-fi/enrollment/students/{student_id}/staffs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStaffsByStudent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
