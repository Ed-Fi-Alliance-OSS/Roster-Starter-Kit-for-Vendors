/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.Roster.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.Roster.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmApplicantProfile
    /// </summary>
    [DataContract(Name = "tpdm_applicantProfile")]
    public partial class TpdmApplicantProfile : IEquatable<TpdmApplicantProfile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmApplicantProfile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmApplicantProfile() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmApplicantProfile" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="applicantProfileIdentifier">Identifier assigned to a person making formal application for entrance into a program or an open staff position. (required).</param>
        /// <param name="addresses">An unordered collection of applicantProfileAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code..</param>
        /// <param name="applicantCharacteristics">An unordered collection of applicantProfileApplicantCharacteristics. Reflects important characteristics of the applicant&#39;s home situation:      Displaced Homemaker, Immigrant, Migratory, Military Parent, Pregnant Teen, Single Parent, and Unaccompanied Youth..</param>
        /// <param name="backgroundChecks">An unordered collection of applicantProfileBackgroundChecks. Applicant background check history and disposition..</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born..</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen..</param>
        /// <param name="disabilities">An unordered collection of applicantProfileDisabilities. The disability condition(s) that best describes an individual&#39;s impairment..</param>
        /// <param name="economicDisadvantaged">An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy..</param>
        /// <param name="educatorPreparationProgramNames">An unordered collection of applicantProfileEducatorPreparationProgramNames. The Teacher Preparation Program(s) completed by the teacher..</param>
        /// <param name="electronicMails">An unordered collection of applicantProfileElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs..</param>
        /// <param name="firstGenerationStudent">Indicator of whether individual is a first generation college student..</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (required).</param>
        /// <param name="genderDescriptor">The gender with which a person associates..</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III)..</param>
        /// <param name="gradePointAverages">An unordered collection of applicantProfileGradePointAverages. Data that provides information on a measure of average performance in a group of courses taken by an individual..</param>
        /// <param name="highestCompletedLevelOfEducationDescriptor">The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received)..</param>
        /// <param name="highlyQualifiedAcademicSubjects">An unordered collection of applicantProfileHighlyQualifiedAcademicSubjects. The academic subject(s) in which the staff is deemed to be \&quot;highly qualified\&quot;..</param>
        /// <param name="highlyQualifiedTeacher">An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught..</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino\&quot;..</param>
        /// <param name="identificationDocuments">An unordered collection of applicantProfileIdentificationDocuments. Describe the documentation of citizenship..</param>
        /// <param name="internationalAddresses">An unordered collection of applicantProfileInternationalAddresses. The set of elements that describes an international address..</param>
        /// <param name="languages">An unordered collection of applicantProfileLanguages. The language(s) the individual uses to communicate..</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (required).</param>
        /// <param name="maidenName">The person&#39;s maiden name..</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony..</param>
        /// <param name="personalIdentificationDocuments">An unordered collection of applicantProfilePersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc..</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the person..</param>
        /// <param name="races">An unordered collection of applicantProfileRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races..</param>
        /// <param name="sexDescriptor">A person&#39;s gender..</param>
        /// <param name="telephones">An unordered collection of applicantProfileTelephones. The 10-digit telephone number, including the area code, for the person..</param>
        /// <param name="visas">An unordered collection of applicantProfileVisas. An indicator of a non-US citizen&#39;s Visa type..</param>
        /// <param name="yearsOfPriorProfessionalExperience">The total number of years that an individual has previously held a similar professional position in one or more education institutions..</param>
        /// <param name="yearsOfPriorTeachingExperience">The total number of years that an individual has previously held a teaching position in one or more education institutions..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmApplicantProfile(string id = default(string), string applicantProfileIdentifier = default(string), List<TpdmApplicantProfileAddress> addresses = default(List<TpdmApplicantProfileAddress>), List<TpdmApplicantProfileApplicantCharacteristic> applicantCharacteristics = default(List<TpdmApplicantProfileApplicantCharacteristic>), List<TpdmApplicantProfileBackgroundCheck> backgroundChecks = default(List<TpdmApplicantProfileBackgroundCheck>), DateTime birthDate = default(DateTime), string citizenshipStatusDescriptor = default(string), List<TpdmApplicantProfileDisability> disabilities = default(List<TpdmApplicantProfileDisability>), bool economicDisadvantaged = default(bool), List<TpdmApplicantProfileEducatorPreparationProgramName> educatorPreparationProgramNames = default(List<TpdmApplicantProfileEducatorPreparationProgramName>), List<TpdmApplicantProfileElectronicMail> electronicMails = default(List<TpdmApplicantProfileElectronicMail>), bool firstGenerationStudent = default(bool), string firstName = default(string), string genderDescriptor = default(string), string generationCodeSuffix = default(string), List<TpdmApplicantProfileGradePointAverage> gradePointAverages = default(List<TpdmApplicantProfileGradePointAverage>), string highestCompletedLevelOfEducationDescriptor = default(string), List<TpdmApplicantProfileHighlyQualifiedAcademicSubject> highlyQualifiedAcademicSubjects = default(List<TpdmApplicantProfileHighlyQualifiedAcademicSubject>), bool highlyQualifiedTeacher = default(bool), bool hispanicLatinoEthnicity = default(bool), List<TpdmApplicantProfileIdentificationDocument> identificationDocuments = default(List<TpdmApplicantProfileIdentificationDocument>), List<TpdmApplicantProfileInternationalAddress> internationalAddresses = default(List<TpdmApplicantProfileInternationalAddress>), List<TpdmApplicantProfileLanguage> languages = default(List<TpdmApplicantProfileLanguage>), string lastSurname = default(string), string maidenName = default(string), string middleName = default(string), List<TpdmApplicantProfilePersonalIdentificationDocument> personalIdentificationDocuments = default(List<TpdmApplicantProfilePersonalIdentificationDocument>), string personalTitlePrefix = default(string), List<TpdmApplicantProfileRace> races = default(List<TpdmApplicantProfileRace>), string sexDescriptor = default(string), List<TpdmApplicantProfileTelephone> telephones = default(List<TpdmApplicantProfileTelephone>), List<TpdmApplicantProfileVisa> visas = default(List<TpdmApplicantProfileVisa>), double yearsOfPriorProfessionalExperience = default(double), double yearsOfPriorTeachingExperience = default(double), string etag = default(string))
        {
            // to ensure "applicantProfileIdentifier" is required (not null)
            this.ApplicantProfileIdentifier = applicantProfileIdentifier ?? throw new ArgumentNullException("applicantProfileIdentifier is a required property for TpdmApplicantProfile and cannot be null");
            // to ensure "firstName" is required (not null)
            this.FirstName = firstName ?? throw new ArgumentNullException("firstName is a required property for TpdmApplicantProfile and cannot be null");
            // to ensure "lastSurname" is required (not null)
            this.LastSurname = lastSurname ?? throw new ArgumentNullException("lastSurname is a required property for TpdmApplicantProfile and cannot be null");
            this.Id = id;
            this.Addresses = addresses;
            this.ApplicantCharacteristics = applicantCharacteristics;
            this.BackgroundChecks = backgroundChecks;
            this.BirthDate = birthDate;
            this.CitizenshipStatusDescriptor = citizenshipStatusDescriptor;
            this.Disabilities = disabilities;
            this.EconomicDisadvantaged = economicDisadvantaged;
            this.EducatorPreparationProgramNames = educatorPreparationProgramNames;
            this.ElectronicMails = electronicMails;
            this.FirstGenerationStudent = firstGenerationStudent;
            this.GenderDescriptor = genderDescriptor;
            this.GenerationCodeSuffix = generationCodeSuffix;
            this.GradePointAverages = gradePointAverages;
            this.HighestCompletedLevelOfEducationDescriptor = highestCompletedLevelOfEducationDescriptor;
            this.HighlyQualifiedAcademicSubjects = highlyQualifiedAcademicSubjects;
            this.HighlyQualifiedTeacher = highlyQualifiedTeacher;
            this.HispanicLatinoEthnicity = hispanicLatinoEthnicity;
            this.IdentificationDocuments = identificationDocuments;
            this.InternationalAddresses = internationalAddresses;
            this.Languages = languages;
            this.MaidenName = maidenName;
            this.MiddleName = middleName;
            this.PersonalIdentificationDocuments = personalIdentificationDocuments;
            this.PersonalTitlePrefix = personalTitlePrefix;
            this.Races = races;
            this.SexDescriptor = sexDescriptor;
            this.Telephones = telephones;
            this.Visas = visas;
            this.YearsOfPriorProfessionalExperience = yearsOfPriorProfessionalExperience;
            this.YearsOfPriorTeachingExperience = yearsOfPriorTeachingExperience;
            this.Etag = etag;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Identifier assigned to a person making formal application for entrance into a program or an open staff position.
        /// </summary>
        /// <value>Identifier assigned to a person making formal application for entrance into a program or an open staff position.</value>
        [DataMember(Name = "applicantProfileIdentifier", IsRequired = true, EmitDefaultValue = false)]
        public string ApplicantProfileIdentifier { get; set; }

        /// <summary>
        /// An unordered collection of applicantProfileAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code.
        /// </summary>
        /// <value>An unordered collection of applicantProfileAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code.</value>
        [DataMember(Name = "addresses", EmitDefaultValue = false)]
        public List<TpdmApplicantProfileAddress> Addresses { get; set; }

        /// <summary>
        /// An unordered collection of applicantProfileApplicantCharacteristics. Reflects important characteristics of the applicant&#39;s home situation:      Displaced Homemaker, Immigrant, Migratory, Military Parent, Pregnant Teen, Single Parent, and Unaccompanied Youth.
        /// </summary>
        /// <value>An unordered collection of applicantProfileApplicantCharacteristics. Reflects important characteristics of the applicant&#39;s home situation:      Displaced Homemaker, Immigrant, Migratory, Military Parent, Pregnant Teen, Single Parent, and Unaccompanied Youth.</value>
        [DataMember(Name = "applicantCharacteristics", EmitDefaultValue = false)]
        public List<TpdmApplicantProfileApplicantCharacteristic> ApplicantCharacteristics { get; set; }

        /// <summary>
        /// An unordered collection of applicantProfileBackgroundChecks. Applicant background check history and disposition.
        /// </summary>
        /// <value>An unordered collection of applicantProfileBackgroundChecks. Applicant background check history and disposition.</value>
        [DataMember(Name = "backgroundChecks", EmitDefaultValue = false)]
        public List<TpdmApplicantProfileBackgroundCheck> BackgroundChecks { get; set; }

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        /// <value>The month, day, and year on which an individual was born.</value>
        [DataMember(Name = "birthDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime BirthDate { get; set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        /// <value>An indicator of whether or not the person is a U.S. citizen.</value>
        [DataMember(Name = "citizenshipStatusDescriptor", EmitDefaultValue = false)]
        public string CitizenshipStatusDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of applicantProfileDisabilities. The disability condition(s) that best describes an individual&#39;s impairment.
        /// </summary>
        /// <value>An unordered collection of applicantProfileDisabilities. The disability condition(s) that best describes an individual&#39;s impairment.</value>
        [DataMember(Name = "disabilities", EmitDefaultValue = false)]
        public List<TpdmApplicantProfileDisability> Disabilities { get; set; }

        /// <summary>
        /// An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy.
        /// </summary>
        /// <value>An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy.</value>
        [DataMember(Name = "economicDisadvantaged", EmitDefaultValue = true)]
        public bool EconomicDisadvantaged { get; set; }

        /// <summary>
        /// An unordered collection of applicantProfileEducatorPreparationProgramNames. The Teacher Preparation Program(s) completed by the teacher.
        /// </summary>
        /// <value>An unordered collection of applicantProfileEducatorPreparationProgramNames. The Teacher Preparation Program(s) completed by the teacher.</value>
        [DataMember(Name = "educatorPreparationProgramNames", EmitDefaultValue = false)]
        public List<TpdmApplicantProfileEducatorPreparationProgramName> EducatorPreparationProgramNames { get; set; }

        /// <summary>
        /// An unordered collection of applicantProfileElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.
        /// </summary>
        /// <value>An unordered collection of applicantProfileElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.</value>
        [DataMember(Name = "electronicMails", EmitDefaultValue = false)]
        public List<TpdmApplicantProfileElectronicMail> ElectronicMails { get; set; }

        /// <summary>
        /// Indicator of whether individual is a first generation college student.
        /// </summary>
        /// <value>Indicator of whether individual is a first generation college student.</value>
        [DataMember(Name = "firstGenerationStudent", EmitDefaultValue = true)]
        public bool FirstGenerationStudent { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        /// <value>A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.</value>
        [DataMember(Name = "firstName", IsRequired = true, EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The gender with which a person associates.
        /// </summary>
        /// <value>The gender with which a person associates.</value>
        [DataMember(Name = "genderDescriptor", EmitDefaultValue = false)]
        public string GenderDescriptor { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        /// <value>An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).</value>
        [DataMember(Name = "generationCodeSuffix", EmitDefaultValue = false)]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// An unordered collection of applicantProfileGradePointAverages. Data that provides information on a measure of average performance in a group of courses taken by an individual.
        /// </summary>
        /// <value>An unordered collection of applicantProfileGradePointAverages. Data that provides information on a measure of average performance in a group of courses taken by an individual.</value>
        [DataMember(Name = "gradePointAverages", EmitDefaultValue = false)]
        public List<TpdmApplicantProfileGradePointAverage> GradePointAverages { get; set; }

        /// <summary>
        /// The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        /// </summary>
        /// <value>The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).</value>
        [DataMember(Name = "highestCompletedLevelOfEducationDescriptor", EmitDefaultValue = false)]
        public string HighestCompletedLevelOfEducationDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of applicantProfileHighlyQualifiedAcademicSubjects. The academic subject(s) in which the staff is deemed to be \&quot;highly qualified\&quot;.
        /// </summary>
        /// <value>An unordered collection of applicantProfileHighlyQualifiedAcademicSubjects. The academic subject(s) in which the staff is deemed to be \&quot;highly qualified\&quot;.</value>
        [DataMember(Name = "highlyQualifiedAcademicSubjects", EmitDefaultValue = false)]
        public List<TpdmApplicantProfileHighlyQualifiedAcademicSubject> HighlyQualifiedAcademicSubjects { get; set; }

        /// <summary>
        /// An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.
        /// </summary>
        /// <value>An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.</value>
        [DataMember(Name = "highlyQualifiedTeacher", EmitDefaultValue = true)]
        public bool HighlyQualifiedTeacher { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino\&quot;.
        /// </summary>
        /// <value>An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino\&quot;.</value>
        [DataMember(Name = "hispanicLatinoEthnicity", EmitDefaultValue = true)]
        public bool HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// An unordered collection of applicantProfileIdentificationDocuments. Describe the documentation of citizenship.
        /// </summary>
        /// <value>An unordered collection of applicantProfileIdentificationDocuments. Describe the documentation of citizenship.</value>
        [DataMember(Name = "identificationDocuments", EmitDefaultValue = false)]
        public List<TpdmApplicantProfileIdentificationDocument> IdentificationDocuments { get; set; }

        /// <summary>
        /// An unordered collection of applicantProfileInternationalAddresses. The set of elements that describes an international address.
        /// </summary>
        /// <value>An unordered collection of applicantProfileInternationalAddresses. The set of elements that describes an international address.</value>
        [DataMember(Name = "internationalAddresses", EmitDefaultValue = false)]
        public List<TpdmApplicantProfileInternationalAddress> InternationalAddresses { get; set; }

        /// <summary>
        /// An unordered collection of applicantProfileLanguages. The language(s) the individual uses to communicate.
        /// </summary>
        /// <value>An unordered collection of applicantProfileLanguages. The language(s) the individual uses to communicate.</value>
        [DataMember(Name = "languages", EmitDefaultValue = false)]
        public List<TpdmApplicantProfileLanguage> Languages { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        /// <value>The name borne in common by members of a family.</value>
        [DataMember(Name = "lastSurname", IsRequired = true, EmitDefaultValue = false)]
        public string LastSurname { get; set; }

        /// <summary>
        /// The person&#39;s maiden name.
        /// </summary>
        /// <value>The person&#39;s maiden name.</value>
        [DataMember(Name = "maidenName", EmitDefaultValue = false)]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        /// <value>A secondary name given to an individual at birth, baptism, or during another naming ceremony.</value>
        [DataMember(Name = "middleName", EmitDefaultValue = false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// An unordered collection of applicantProfilePersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.
        /// </summary>
        /// <value>An unordered collection of applicantProfilePersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.</value>
        [DataMember(Name = "personalIdentificationDocuments", EmitDefaultValue = false)]
        public List<TpdmApplicantProfilePersonalIdentificationDocument> PersonalIdentificationDocuments { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        /// <value>A prefix used to denote the title, degree, position, or seniority of the person.</value>
        [DataMember(Name = "personalTitlePrefix", EmitDefaultValue = false)]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// An unordered collection of applicantProfileRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.
        /// </summary>
        /// <value>An unordered collection of applicantProfileRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.</value>
        [DataMember(Name = "races", EmitDefaultValue = false)]
        public List<TpdmApplicantProfileRace> Races { get; set; }

        /// <summary>
        /// A person&#39;s gender.
        /// </summary>
        /// <value>A person&#39;s gender.</value>
        [DataMember(Name = "sexDescriptor", EmitDefaultValue = false)]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of applicantProfileTelephones. The 10-digit telephone number, including the area code, for the person.
        /// </summary>
        /// <value>An unordered collection of applicantProfileTelephones. The 10-digit telephone number, including the area code, for the person.</value>
        [DataMember(Name = "telephones", EmitDefaultValue = false)]
        public List<TpdmApplicantProfileTelephone> Telephones { get; set; }

        /// <summary>
        /// An unordered collection of applicantProfileVisas. An indicator of a non-US citizen&#39;s Visa type.
        /// </summary>
        /// <value>An unordered collection of applicantProfileVisas. An indicator of a non-US citizen&#39;s Visa type.</value>
        [DataMember(Name = "visas", EmitDefaultValue = false)]
        public List<TpdmApplicantProfileVisa> Visas { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a similar professional position in one or more education institutions.
        /// </summary>
        /// <value>The total number of years that an individual has previously held a similar professional position in one or more education institutions.</value>
        [DataMember(Name = "yearsOfPriorProfessionalExperience", EmitDefaultValue = false)]
        public double YearsOfPriorProfessionalExperience { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a teaching position in one or more education institutions.
        /// </summary>
        /// <value>The total number of years that an individual has previously held a teaching position in one or more education institutions.</value>
        [DataMember(Name = "yearsOfPriorTeachingExperience", EmitDefaultValue = false)]
        public double YearsOfPriorTeachingExperience { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmApplicantProfile {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ApplicantProfileIdentifier: ").Append(ApplicantProfileIdentifier).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  ApplicantCharacteristics: ").Append(ApplicantCharacteristics).Append("\n");
            sb.Append("  BackgroundChecks: ").Append(BackgroundChecks).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  CitizenshipStatusDescriptor: ").Append(CitizenshipStatusDescriptor).Append("\n");
            sb.Append("  Disabilities: ").Append(Disabilities).Append("\n");
            sb.Append("  EconomicDisadvantaged: ").Append(EconomicDisadvantaged).Append("\n");
            sb.Append("  EducatorPreparationProgramNames: ").Append(EducatorPreparationProgramNames).Append("\n");
            sb.Append("  ElectronicMails: ").Append(ElectronicMails).Append("\n");
            sb.Append("  FirstGenerationStudent: ").Append(FirstGenerationStudent).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  GenderDescriptor: ").Append(GenderDescriptor).Append("\n");
            sb.Append("  GenerationCodeSuffix: ").Append(GenerationCodeSuffix).Append("\n");
            sb.Append("  GradePointAverages: ").Append(GradePointAverages).Append("\n");
            sb.Append("  HighestCompletedLevelOfEducationDescriptor: ").Append(HighestCompletedLevelOfEducationDescriptor).Append("\n");
            sb.Append("  HighlyQualifiedAcademicSubjects: ").Append(HighlyQualifiedAcademicSubjects).Append("\n");
            sb.Append("  HighlyQualifiedTeacher: ").Append(HighlyQualifiedTeacher).Append("\n");
            sb.Append("  HispanicLatinoEthnicity: ").Append(HispanicLatinoEthnicity).Append("\n");
            sb.Append("  IdentificationDocuments: ").Append(IdentificationDocuments).Append("\n");
            sb.Append("  InternationalAddresses: ").Append(InternationalAddresses).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  LastSurname: ").Append(LastSurname).Append("\n");
            sb.Append("  MaidenName: ").Append(MaidenName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  PersonalIdentificationDocuments: ").Append(PersonalIdentificationDocuments).Append("\n");
            sb.Append("  PersonalTitlePrefix: ").Append(PersonalTitlePrefix).Append("\n");
            sb.Append("  Races: ").Append(Races).Append("\n");
            sb.Append("  SexDescriptor: ").Append(SexDescriptor).Append("\n");
            sb.Append("  Telephones: ").Append(Telephones).Append("\n");
            sb.Append("  Visas: ").Append(Visas).Append("\n");
            sb.Append("  YearsOfPriorProfessionalExperience: ").Append(YearsOfPriorProfessionalExperience).Append("\n");
            sb.Append("  YearsOfPriorTeachingExperience: ").Append(YearsOfPriorTeachingExperience).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmApplicantProfile);
        }

        /// <summary>
        /// Returns true if TpdmApplicantProfile instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmApplicantProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmApplicantProfile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ApplicantProfileIdentifier == input.ApplicantProfileIdentifier ||
                    (this.ApplicantProfileIdentifier != null &&
                    this.ApplicantProfileIdentifier.Equals(input.ApplicantProfileIdentifier))
                ) && 
                (
                    this.Addresses == input.Addresses ||
                    this.Addresses != null &&
                    input.Addresses != null &&
                    this.Addresses.SequenceEqual(input.Addresses)
                ) && 
                (
                    this.ApplicantCharacteristics == input.ApplicantCharacteristics ||
                    this.ApplicantCharacteristics != null &&
                    input.ApplicantCharacteristics != null &&
                    this.ApplicantCharacteristics.SequenceEqual(input.ApplicantCharacteristics)
                ) && 
                (
                    this.BackgroundChecks == input.BackgroundChecks ||
                    this.BackgroundChecks != null &&
                    input.BackgroundChecks != null &&
                    this.BackgroundChecks.SequenceEqual(input.BackgroundChecks)
                ) && 
                (
                    this.BirthDate == input.BirthDate ||
                    (this.BirthDate != null &&
                    this.BirthDate.Equals(input.BirthDate))
                ) && 
                (
                    this.CitizenshipStatusDescriptor == input.CitizenshipStatusDescriptor ||
                    (this.CitizenshipStatusDescriptor != null &&
                    this.CitizenshipStatusDescriptor.Equals(input.CitizenshipStatusDescriptor))
                ) && 
                (
                    this.Disabilities == input.Disabilities ||
                    this.Disabilities != null &&
                    input.Disabilities != null &&
                    this.Disabilities.SequenceEqual(input.Disabilities)
                ) && 
                (
                    this.EconomicDisadvantaged == input.EconomicDisadvantaged ||
                    this.EconomicDisadvantaged.Equals(input.EconomicDisadvantaged)
                ) && 
                (
                    this.EducatorPreparationProgramNames == input.EducatorPreparationProgramNames ||
                    this.EducatorPreparationProgramNames != null &&
                    input.EducatorPreparationProgramNames != null &&
                    this.EducatorPreparationProgramNames.SequenceEqual(input.EducatorPreparationProgramNames)
                ) && 
                (
                    this.ElectronicMails == input.ElectronicMails ||
                    this.ElectronicMails != null &&
                    input.ElectronicMails != null &&
                    this.ElectronicMails.SequenceEqual(input.ElectronicMails)
                ) && 
                (
                    this.FirstGenerationStudent == input.FirstGenerationStudent ||
                    this.FirstGenerationStudent.Equals(input.FirstGenerationStudent)
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.GenderDescriptor == input.GenderDescriptor ||
                    (this.GenderDescriptor != null &&
                    this.GenderDescriptor.Equals(input.GenderDescriptor))
                ) && 
                (
                    this.GenerationCodeSuffix == input.GenerationCodeSuffix ||
                    (this.GenerationCodeSuffix != null &&
                    this.GenerationCodeSuffix.Equals(input.GenerationCodeSuffix))
                ) && 
                (
                    this.GradePointAverages == input.GradePointAverages ||
                    this.GradePointAverages != null &&
                    input.GradePointAverages != null &&
                    this.GradePointAverages.SequenceEqual(input.GradePointAverages)
                ) && 
                (
                    this.HighestCompletedLevelOfEducationDescriptor == input.HighestCompletedLevelOfEducationDescriptor ||
                    (this.HighestCompletedLevelOfEducationDescriptor != null &&
                    this.HighestCompletedLevelOfEducationDescriptor.Equals(input.HighestCompletedLevelOfEducationDescriptor))
                ) && 
                (
                    this.HighlyQualifiedAcademicSubjects == input.HighlyQualifiedAcademicSubjects ||
                    this.HighlyQualifiedAcademicSubjects != null &&
                    input.HighlyQualifiedAcademicSubjects != null &&
                    this.HighlyQualifiedAcademicSubjects.SequenceEqual(input.HighlyQualifiedAcademicSubjects)
                ) && 
                (
                    this.HighlyQualifiedTeacher == input.HighlyQualifiedTeacher ||
                    this.HighlyQualifiedTeacher.Equals(input.HighlyQualifiedTeacher)
                ) && 
                (
                    this.HispanicLatinoEthnicity == input.HispanicLatinoEthnicity ||
                    this.HispanicLatinoEthnicity.Equals(input.HispanicLatinoEthnicity)
                ) && 
                (
                    this.IdentificationDocuments == input.IdentificationDocuments ||
                    this.IdentificationDocuments != null &&
                    input.IdentificationDocuments != null &&
                    this.IdentificationDocuments.SequenceEqual(input.IdentificationDocuments)
                ) && 
                (
                    this.InternationalAddresses == input.InternationalAddresses ||
                    this.InternationalAddresses != null &&
                    input.InternationalAddresses != null &&
                    this.InternationalAddresses.SequenceEqual(input.InternationalAddresses)
                ) && 
                (
                    this.Languages == input.Languages ||
                    this.Languages != null &&
                    input.Languages != null &&
                    this.Languages.SequenceEqual(input.Languages)
                ) && 
                (
                    this.LastSurname == input.LastSurname ||
                    (this.LastSurname != null &&
                    this.LastSurname.Equals(input.LastSurname))
                ) && 
                (
                    this.MaidenName == input.MaidenName ||
                    (this.MaidenName != null &&
                    this.MaidenName.Equals(input.MaidenName))
                ) && 
                (
                    this.MiddleName == input.MiddleName ||
                    (this.MiddleName != null &&
                    this.MiddleName.Equals(input.MiddleName))
                ) && 
                (
                    this.PersonalIdentificationDocuments == input.PersonalIdentificationDocuments ||
                    this.PersonalIdentificationDocuments != null &&
                    input.PersonalIdentificationDocuments != null &&
                    this.PersonalIdentificationDocuments.SequenceEqual(input.PersonalIdentificationDocuments)
                ) && 
                (
                    this.PersonalTitlePrefix == input.PersonalTitlePrefix ||
                    (this.PersonalTitlePrefix != null &&
                    this.PersonalTitlePrefix.Equals(input.PersonalTitlePrefix))
                ) && 
                (
                    this.Races == input.Races ||
                    this.Races != null &&
                    input.Races != null &&
                    this.Races.SequenceEqual(input.Races)
                ) && 
                (
                    this.SexDescriptor == input.SexDescriptor ||
                    (this.SexDescriptor != null &&
                    this.SexDescriptor.Equals(input.SexDescriptor))
                ) && 
                (
                    this.Telephones == input.Telephones ||
                    this.Telephones != null &&
                    input.Telephones != null &&
                    this.Telephones.SequenceEqual(input.Telephones)
                ) && 
                (
                    this.Visas == input.Visas ||
                    this.Visas != null &&
                    input.Visas != null &&
                    this.Visas.SequenceEqual(input.Visas)
                ) && 
                (
                    this.YearsOfPriorProfessionalExperience == input.YearsOfPriorProfessionalExperience ||
                    this.YearsOfPriorProfessionalExperience.Equals(input.YearsOfPriorProfessionalExperience)
                ) && 
                (
                    this.YearsOfPriorTeachingExperience == input.YearsOfPriorTeachingExperience ||
                    this.YearsOfPriorTeachingExperience.Equals(input.YearsOfPriorTeachingExperience)
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ApplicantProfileIdentifier != null)
                    hashCode = hashCode * 59 + this.ApplicantProfileIdentifier.GetHashCode();
                if (this.Addresses != null)
                    hashCode = hashCode * 59 + this.Addresses.GetHashCode();
                if (this.ApplicantCharacteristics != null)
                    hashCode = hashCode * 59 + this.ApplicantCharacteristics.GetHashCode();
                if (this.BackgroundChecks != null)
                    hashCode = hashCode * 59 + this.BackgroundChecks.GetHashCode();
                if (this.BirthDate != null)
                    hashCode = hashCode * 59 + this.BirthDate.GetHashCode();
                if (this.CitizenshipStatusDescriptor != null)
                    hashCode = hashCode * 59 + this.CitizenshipStatusDescriptor.GetHashCode();
                if (this.Disabilities != null)
                    hashCode = hashCode * 59 + this.Disabilities.GetHashCode();
                hashCode = hashCode * 59 + this.EconomicDisadvantaged.GetHashCode();
                if (this.EducatorPreparationProgramNames != null)
                    hashCode = hashCode * 59 + this.EducatorPreparationProgramNames.GetHashCode();
                if (this.ElectronicMails != null)
                    hashCode = hashCode * 59 + this.ElectronicMails.GetHashCode();
                hashCode = hashCode * 59 + this.FirstGenerationStudent.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.GenderDescriptor != null)
                    hashCode = hashCode * 59 + this.GenderDescriptor.GetHashCode();
                if (this.GenerationCodeSuffix != null)
                    hashCode = hashCode * 59 + this.GenerationCodeSuffix.GetHashCode();
                if (this.GradePointAverages != null)
                    hashCode = hashCode * 59 + this.GradePointAverages.GetHashCode();
                if (this.HighestCompletedLevelOfEducationDescriptor != null)
                    hashCode = hashCode * 59 + this.HighestCompletedLevelOfEducationDescriptor.GetHashCode();
                if (this.HighlyQualifiedAcademicSubjects != null)
                    hashCode = hashCode * 59 + this.HighlyQualifiedAcademicSubjects.GetHashCode();
                hashCode = hashCode * 59 + this.HighlyQualifiedTeacher.GetHashCode();
                hashCode = hashCode * 59 + this.HispanicLatinoEthnicity.GetHashCode();
                if (this.IdentificationDocuments != null)
                    hashCode = hashCode * 59 + this.IdentificationDocuments.GetHashCode();
                if (this.InternationalAddresses != null)
                    hashCode = hashCode * 59 + this.InternationalAddresses.GetHashCode();
                if (this.Languages != null)
                    hashCode = hashCode * 59 + this.Languages.GetHashCode();
                if (this.LastSurname != null)
                    hashCode = hashCode * 59 + this.LastSurname.GetHashCode();
                if (this.MaidenName != null)
                    hashCode = hashCode * 59 + this.MaidenName.GetHashCode();
                if (this.MiddleName != null)
                    hashCode = hashCode * 59 + this.MiddleName.GetHashCode();
                if (this.PersonalIdentificationDocuments != null)
                    hashCode = hashCode * 59 + this.PersonalIdentificationDocuments.GetHashCode();
                if (this.PersonalTitlePrefix != null)
                    hashCode = hashCode * 59 + this.PersonalTitlePrefix.GetHashCode();
                if (this.Races != null)
                    hashCode = hashCode * 59 + this.Races.GetHashCode();
                if (this.SexDescriptor != null)
                    hashCode = hashCode * 59 + this.SexDescriptor.GetHashCode();
                if (this.Telephones != null)
                    hashCode = hashCode * 59 + this.Telephones.GetHashCode();
                if (this.Visas != null)
                    hashCode = hashCode * 59 + this.Visas.GetHashCode();
                hashCode = hashCode * 59 + this.YearsOfPriorProfessionalExperience.GetHashCode();
                hashCode = hashCode * 59 + this.YearsOfPriorTeachingExperience.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ApplicantProfileIdentifier (string) maxLength
            if(this.ApplicantProfileIdentifier != null && this.ApplicantProfileIdentifier.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ApplicantProfileIdentifier, length must be less than 32.", new [] { "ApplicantProfileIdentifier" });
            }

            // CitizenshipStatusDescriptor (string) maxLength
            if(this.CitizenshipStatusDescriptor != null && this.CitizenshipStatusDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CitizenshipStatusDescriptor, length must be less than 306.", new [] { "CitizenshipStatusDescriptor" });
            }

            // FirstName (string) maxLength
            if(this.FirstName != null && this.FirstName.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 75.", new [] { "FirstName" });
            }

            // GenderDescriptor (string) maxLength
            if(this.GenderDescriptor != null && this.GenderDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GenderDescriptor, length must be less than 306.", new [] { "GenderDescriptor" });
            }

            // GenerationCodeSuffix (string) maxLength
            if(this.GenerationCodeSuffix != null && this.GenerationCodeSuffix.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GenerationCodeSuffix, length must be less than 10.", new [] { "GenerationCodeSuffix" });
            }

            // HighestCompletedLevelOfEducationDescriptor (string) maxLength
            if(this.HighestCompletedLevelOfEducationDescriptor != null && this.HighestCompletedLevelOfEducationDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HighestCompletedLevelOfEducationDescriptor, length must be less than 306.", new [] { "HighestCompletedLevelOfEducationDescriptor" });
            }

            // LastSurname (string) maxLength
            if(this.LastSurname != null && this.LastSurname.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastSurname, length must be less than 75.", new [] { "LastSurname" });
            }

            // MaidenName (string) maxLength
            if(this.MaidenName != null && this.MaidenName.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaidenName, length must be less than 75.", new [] { "MaidenName" });
            }

            // MiddleName (string) maxLength
            if(this.MiddleName != null && this.MiddleName.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MiddleName, length must be less than 75.", new [] { "MiddleName" });
            }

            // PersonalTitlePrefix (string) maxLength
            if(this.PersonalTitlePrefix != null && this.PersonalTitlePrefix.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PersonalTitlePrefix, length must be less than 30.", new [] { "PersonalTitlePrefix" });
            }

            // SexDescriptor (string) maxLength
            if(this.SexDescriptor != null && this.SexDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SexDescriptor, length must be less than 306.", new [] { "SexDescriptor" });
            }

            yield break;
        }
    }

}
