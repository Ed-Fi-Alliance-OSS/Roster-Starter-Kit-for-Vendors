@model ExtendedInfoResponse<List<Staff>>

@{
    ViewData["Title"] = "Staff";
}

<h1>Staff</h1>

Operations

Load / Reload
<p> Get Staff From Ed - Fi Api (This will overwrite the currently stored staff records)</p>
<div><button id="btnLoadStaff" class="btn btn-primary btn" onclick="document.location.href='@Url.Action("LoadStaff")'">Get Staff</button></div>

@if (Model.IsExtendedInfoAvailable)
{
    await Html.RenderPartialAsync("_ExtendedInfoResponsePage", Model.GeneralInfo);
}
<hr />
<form>
    Current Staff Saved (@Model.FullDataSet.Count Records)
    <table class="table">
        <thead>
            <tr>
                <th>Staff UniqueId</th>
                <th>First Name</th>
                <th>Last Surname</th>
                <th>Staff Classification</th>
                <th>Api Resource Id</th>
                <th>Json Payload</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.FullDataSet)
            {
                <tr class="parent-row">
                    <td>
                        @item.StaffUniqueId
                    </td>
                    <td>
                        @item.FirstName
                    </td>
                    <td>
                        @item.LastSurname
                    </td>
                    <td>
                        @{
                            string staffClassifications;

                            if (item.EducationOrganizationAssignments == null)
                            {
                                staffClassifications = "";
                            }
                            else
                            {
                                staffClassifications = string.Join(", ",
                                    item.EducationOrganizationAssignments
                                        .Select(assignment => assignment?.StaffClassificationDescriptor ?? "")
                                        .Select(classification =>
                                        {
                                            var hashIndex = classification.IndexOf("#", StringComparison.InvariantCulture);
                                            if (hashIndex >= 0)
                                            {
                                                classification = classification.Substring(hashIndex + 1);
                                            }

                                            return classification;
                                        }));
                            }
                        }

                        @staffClassifications
                    </td>
                    <td>
                        @item.Id
                    </td>
                    <td style="text-align:justify">
                        <span class="sign btn btn-outline-primary" style="margin-right: 5px"></span>
                    </td>
                </tr>
                <tr class="child-content">
                    <td colspan="12">
                        <table class="table table-striped table-hover table-bordered table-responsive">
                            <tbody class="content-tbody">
                                <tr><td><pre class="json-container prettify">@item.ToJson()</pre></td></tr>
                            </tbody>
                        </table>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</form>
@section Scripts {
    <script>
        var addSpinner = window.addSpinner;
        $(document).ready(function () {
            $("#btnLoadStaff").click(function () {
                addSpinner($(this), "Loading Staff");
            });
        });
    </script>
}
