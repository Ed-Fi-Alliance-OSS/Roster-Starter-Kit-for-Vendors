/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.Roster.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.Roster.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmCandidateRelationshipToStaffAssociation
    /// </summary>
    [DataContract(Name = "tpdm_candidateRelationshipToStaffAssociation")]
    public partial class TpdmCandidateRelationshipToStaffAssociation : IEquatable<TpdmCandidateRelationshipToStaffAssociation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmCandidateRelationshipToStaffAssociation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmCandidateRelationshipToStaffAssociation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmCandidateRelationshipToStaffAssociation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="candidateReference">candidateReference (required).</param>
        /// <param name="staffReference">staffReference (required).</param>
        /// <param name="beginDate">The month, day, and year on which the candidate is associated to the staff. (required).</param>
        /// <param name="endDate">The month, day, and year on which the candidate stops association with the staff..</param>
        /// <param name="staffToCandidateRelationshipDescriptor">Defines the staff relationship to the candidate (e.g., supervising principal, mentor, coordinating teacher, etc. ).</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmCandidateRelationshipToStaffAssociation(string id = default(string), TpdmCandidateReference candidateReference = default(TpdmCandidateReference), EdFiStaffReference staffReference = default(EdFiStaffReference), DateTime beginDate = default(DateTime), DateTime endDate = default(DateTime), string staffToCandidateRelationshipDescriptor = default(string), string etag = default(string))
        {
            // to ensure "candidateReference" is required (not null)
            this.CandidateReference = candidateReference ?? throw new ArgumentNullException("candidateReference is a required property for TpdmCandidateRelationshipToStaffAssociation and cannot be null");
            // to ensure "staffReference" is required (not null)
            this.StaffReference = staffReference ?? throw new ArgumentNullException("staffReference is a required property for TpdmCandidateRelationshipToStaffAssociation and cannot be null");
            this.BeginDate = beginDate;
            this.Id = id;
            this.EndDate = endDate;
            this.StaffToCandidateRelationshipDescriptor = staffToCandidateRelationshipDescriptor;
            this.Etag = etag;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets CandidateReference
        /// </summary>
        [DataMember(Name = "candidateReference", IsRequired = true, EmitDefaultValue = false)]
        public TpdmCandidateReference CandidateReference { get; set; }

        /// <summary>
        /// Gets or Sets StaffReference
        /// </summary>
        [DataMember(Name = "staffReference", IsRequired = true, EmitDefaultValue = false)]
        public EdFiStaffReference StaffReference { get; set; }

        /// <summary>
        /// The month, day, and year on which the candidate is associated to the staff.
        /// </summary>
        /// <value>The month, day, and year on which the candidate is associated to the staff.</value>
        [DataMember(Name = "beginDate", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime BeginDate { get; set; }

        /// <summary>
        /// The month, day, and year on which the candidate stops association with the staff.
        /// </summary>
        /// <value>The month, day, and year on which the candidate stops association with the staff.</value>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Defines the staff relationship to the candidate (e.g., supervising principal, mentor, coordinating teacher, etc. )
        /// </summary>
        /// <value>Defines the staff relationship to the candidate (e.g., supervising principal, mentor, coordinating teacher, etc. )</value>
        [DataMember(Name = "staffToCandidateRelationshipDescriptor", EmitDefaultValue = false)]
        public string StaffToCandidateRelationshipDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmCandidateRelationshipToStaffAssociation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CandidateReference: ").Append(CandidateReference).Append("\n");
            sb.Append("  StaffReference: ").Append(StaffReference).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  StaffToCandidateRelationshipDescriptor: ").Append(StaffToCandidateRelationshipDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmCandidateRelationshipToStaffAssociation);
        }

        /// <summary>
        /// Returns true if TpdmCandidateRelationshipToStaffAssociation instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmCandidateRelationshipToStaffAssociation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmCandidateRelationshipToStaffAssociation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CandidateReference == input.CandidateReference ||
                    (this.CandidateReference != null &&
                    this.CandidateReference.Equals(input.CandidateReference))
                ) && 
                (
                    this.StaffReference == input.StaffReference ||
                    (this.StaffReference != null &&
                    this.StaffReference.Equals(input.StaffReference))
                ) && 
                (
                    this.BeginDate == input.BeginDate ||
                    (this.BeginDate != null &&
                    this.BeginDate.Equals(input.BeginDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.StaffToCandidateRelationshipDescriptor == input.StaffToCandidateRelationshipDescriptor ||
                    (this.StaffToCandidateRelationshipDescriptor != null &&
                    this.StaffToCandidateRelationshipDescriptor.Equals(input.StaffToCandidateRelationshipDescriptor))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CandidateReference != null)
                    hashCode = hashCode * 59 + this.CandidateReference.GetHashCode();
                if (this.StaffReference != null)
                    hashCode = hashCode * 59 + this.StaffReference.GetHashCode();
                if (this.BeginDate != null)
                    hashCode = hashCode * 59 + this.BeginDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.StaffToCandidateRelationshipDescriptor != null)
                    hashCode = hashCode * 59 + this.StaffToCandidateRelationshipDescriptor.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // StaffToCandidateRelationshipDescriptor (string) maxLength
            if(this.StaffToCandidateRelationshipDescriptor != null && this.StaffToCandidateRelationshipDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StaffToCandidateRelationshipDescriptor, length must be less than 306.", new [] { "StaffToCandidateRelationshipDescriptor" });
            }

            yield break;
        }
    }

}
