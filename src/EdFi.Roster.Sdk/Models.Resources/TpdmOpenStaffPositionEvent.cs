/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.Roster.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.Roster.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmOpenStaffPositionEvent
    /// </summary>
    [DataContract(Name = "tpdm_openStaffPositionEvent")]
    public partial class TpdmOpenStaffPositionEvent : IEquatable<TpdmOpenStaffPositionEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmOpenStaffPositionEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmOpenStaffPositionEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmOpenStaffPositionEvent" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="eventDate">Date of the open staff position event. (required).</param>
        /// <param name="openStaffPositionEventTypeDescriptor">Reflects milestones like vacancy approved, vacancy posted, date onboarded, processing date, orientation date, etc. (required).</param>
        /// <param name="openStaffPositionReference">openStaffPositionReference (required).</param>
        /// <param name="openStaffPositionEventStatusDescriptor">Reflects the status of the milestone (e.g., pending, completed, cancelled)..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmOpenStaffPositionEvent(string id = default(string), DateTime eventDate = default(DateTime), string openStaffPositionEventTypeDescriptor = default(string), EdFiOpenStaffPositionReference openStaffPositionReference = default(EdFiOpenStaffPositionReference), string openStaffPositionEventStatusDescriptor = default(string), string etag = default(string))
        {
            this.EventDate = eventDate;
            // to ensure "openStaffPositionEventTypeDescriptor" is required (not null)
            this.OpenStaffPositionEventTypeDescriptor = openStaffPositionEventTypeDescriptor ?? throw new ArgumentNullException("openStaffPositionEventTypeDescriptor is a required property for TpdmOpenStaffPositionEvent and cannot be null");
            // to ensure "openStaffPositionReference" is required (not null)
            this.OpenStaffPositionReference = openStaffPositionReference ?? throw new ArgumentNullException("openStaffPositionReference is a required property for TpdmOpenStaffPositionEvent and cannot be null");
            this.Id = id;
            this.OpenStaffPositionEventStatusDescriptor = openStaffPositionEventStatusDescriptor;
            this.Etag = etag;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Date of the open staff position event.
        /// </summary>
        /// <value>Date of the open staff position event.</value>
        [DataMember(Name = "eventDate", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime EventDate { get; set; }

        /// <summary>
        /// Reflects milestones like vacancy approved, vacancy posted, date onboarded, processing date, orientation date, etc.
        /// </summary>
        /// <value>Reflects milestones like vacancy approved, vacancy posted, date onboarded, processing date, orientation date, etc.</value>
        [DataMember(Name = "openStaffPositionEventTypeDescriptor", IsRequired = true, EmitDefaultValue = false)]
        public string OpenStaffPositionEventTypeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets OpenStaffPositionReference
        /// </summary>
        [DataMember(Name = "openStaffPositionReference", IsRequired = true, EmitDefaultValue = false)]
        public EdFiOpenStaffPositionReference OpenStaffPositionReference { get; set; }

        /// <summary>
        /// Reflects the status of the milestone (e.g., pending, completed, cancelled).
        /// </summary>
        /// <value>Reflects the status of the milestone (e.g., pending, completed, cancelled).</value>
        [DataMember(Name = "openStaffPositionEventStatusDescriptor", EmitDefaultValue = false)]
        public string OpenStaffPositionEventStatusDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmOpenStaffPositionEvent {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EventDate: ").Append(EventDate).Append("\n");
            sb.Append("  OpenStaffPositionEventTypeDescriptor: ").Append(OpenStaffPositionEventTypeDescriptor).Append("\n");
            sb.Append("  OpenStaffPositionReference: ").Append(OpenStaffPositionReference).Append("\n");
            sb.Append("  OpenStaffPositionEventStatusDescriptor: ").Append(OpenStaffPositionEventStatusDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmOpenStaffPositionEvent);
        }

        /// <summary>
        /// Returns true if TpdmOpenStaffPositionEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmOpenStaffPositionEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmOpenStaffPositionEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.EventDate == input.EventDate ||
                    (this.EventDate != null &&
                    this.EventDate.Equals(input.EventDate))
                ) && 
                (
                    this.OpenStaffPositionEventTypeDescriptor == input.OpenStaffPositionEventTypeDescriptor ||
                    (this.OpenStaffPositionEventTypeDescriptor != null &&
                    this.OpenStaffPositionEventTypeDescriptor.Equals(input.OpenStaffPositionEventTypeDescriptor))
                ) && 
                (
                    this.OpenStaffPositionReference == input.OpenStaffPositionReference ||
                    (this.OpenStaffPositionReference != null &&
                    this.OpenStaffPositionReference.Equals(input.OpenStaffPositionReference))
                ) && 
                (
                    this.OpenStaffPositionEventStatusDescriptor == input.OpenStaffPositionEventStatusDescriptor ||
                    (this.OpenStaffPositionEventStatusDescriptor != null &&
                    this.OpenStaffPositionEventStatusDescriptor.Equals(input.OpenStaffPositionEventStatusDescriptor))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.EventDate != null)
                    hashCode = hashCode * 59 + this.EventDate.GetHashCode();
                if (this.OpenStaffPositionEventTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.OpenStaffPositionEventTypeDescriptor.GetHashCode();
                if (this.OpenStaffPositionReference != null)
                    hashCode = hashCode * 59 + this.OpenStaffPositionReference.GetHashCode();
                if (this.OpenStaffPositionEventStatusDescriptor != null)
                    hashCode = hashCode * 59 + this.OpenStaffPositionEventStatusDescriptor.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // OpenStaffPositionEventTypeDescriptor (string) maxLength
            if(this.OpenStaffPositionEventTypeDescriptor != null && this.OpenStaffPositionEventTypeDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OpenStaffPositionEventTypeDescriptor, length must be less than 306.", new [] { "OpenStaffPositionEventTypeDescriptor" });
            }

            // OpenStaffPositionEventStatusDescriptor (string) maxLength
            if(this.OpenStaffPositionEventStatusDescriptor != null && this.OpenStaffPositionEventStatusDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OpenStaffPositionEventStatusDescriptor, length must be less than 306.", new [] { "OpenStaffPositionEventStatusDescriptor" });
            }

            yield break;
        }
    }

}
