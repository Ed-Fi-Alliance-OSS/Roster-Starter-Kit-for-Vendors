/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.Roster.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.Roster.Sdk.Models.Resources
{
    /// <summary>
    /// EdFiStaffEducationOrganizationEmploymentAssociation
    /// </summary>
    [DataContract(Name = "edFi_staffEducationOrganizationEmploymentAssociation")]
    public partial class EdFiStaffEducationOrganizationEmploymentAssociation : IEquatable<EdFiStaffEducationOrganizationEmploymentAssociation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffEducationOrganizationEmploymentAssociation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStaffEducationOrganizationEmploymentAssociation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffEducationOrganizationEmploymentAssociation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="employmentStatusDescriptor">Reflects the type of employment or contract; for example:         Probationary         Contractual         Substitute/temporary         Tenured or permanent         Volunteer/no contract         ... (required).</param>
        /// <param name="hireDate">The month, day, and year on which an individual was hired for a position. (required).</param>
        /// <param name="credentialReference">credentialReference.</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference (required).</param>
        /// <param name="staffReference">staffReference (required).</param>
        /// <param name="department">The department or suborganization the employee/contractor is associated with in the EducationOrganization..</param>
        /// <param name="endDate">The month, day, and year on which a contract between an individual and a governing authority ends or is terminated under the provisions of the contract (or the date on which the agreement is made invalid)..</param>
        /// <param name="fullTimeEquivalency">The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting..</param>
        /// <param name="hourlyWage">Hourly wage associated with the employment position being reported..</param>
        /// <param name="offerDate">Date at which the staff member was made an official offer for this employment..</param>
        /// <param name="separationDescriptor">Type of employment separation; for example: Voluntary separation, Involuntary separation,         Mutual agreement         Other, etc..</param>
        /// <param name="separationReasonDescriptor">Reason for terminating the employment; for example:         Employment in education         Employment outside of education         Retirement         Family/personal relocation         Change of assignment..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="ext">ext.</param>
        public EdFiStaffEducationOrganizationEmploymentAssociation(string id = default(string), string employmentStatusDescriptor = default(string), DateTime hireDate = default(DateTime), EdFiCredentialReference credentialReference = default(EdFiCredentialReference), EdFiEducationOrganizationReference educationOrganizationReference = default(EdFiEducationOrganizationReference), EdFiStaffReference staffReference = default(EdFiStaffReference), string department = default(string), DateTime endDate = default(DateTime), double fullTimeEquivalency = default(double), double hourlyWage = default(double), DateTime offerDate = default(DateTime), string separationDescriptor = default(string), string separationReasonDescriptor = default(string), string etag = default(string), StaffEducationOrganizationEmploymentAssociationExtensions ext = default(StaffEducationOrganizationEmploymentAssociationExtensions))
        {
            // to ensure "employmentStatusDescriptor" is required (not null)
            this.EmploymentStatusDescriptor = employmentStatusDescriptor ?? throw new ArgumentNullException("employmentStatusDescriptor is a required property for EdFiStaffEducationOrganizationEmploymentAssociation and cannot be null");
            this.HireDate = hireDate;
            // to ensure "educationOrganizationReference" is required (not null)
            this.EducationOrganizationReference = educationOrganizationReference ?? throw new ArgumentNullException("educationOrganizationReference is a required property for EdFiStaffEducationOrganizationEmploymentAssociation and cannot be null");
            // to ensure "staffReference" is required (not null)
            this.StaffReference = staffReference ?? throw new ArgumentNullException("staffReference is a required property for EdFiStaffEducationOrganizationEmploymentAssociation and cannot be null");
            this.Id = id;
            this.CredentialReference = credentialReference;
            this.Department = department;
            this.EndDate = endDate;
            this.FullTimeEquivalency = fullTimeEquivalency;
            this.HourlyWage = hourlyWage;
            this.OfferDate = offerDate;
            this.SeparationDescriptor = separationDescriptor;
            this.SeparationReasonDescriptor = separationReasonDescriptor;
            this.Etag = etag;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Reflects the type of employment or contract; for example:         Probationary         Contractual         Substitute/temporary         Tenured or permanent         Volunteer/no contract         ...
        /// </summary>
        /// <value>Reflects the type of employment or contract; for example:         Probationary         Contractual         Substitute/temporary         Tenured or permanent         Volunteer/no contract         ...</value>
        [DataMember(Name = "employmentStatusDescriptor", IsRequired = true, EmitDefaultValue = false)]
        public string EmploymentStatusDescriptor { get; set; }

        /// <summary>
        /// The month, day, and year on which an individual was hired for a position.
        /// </summary>
        /// <value>The month, day, and year on which an individual was hired for a position.</value>
        [DataMember(Name = "hireDate", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime HireDate { get; set; }

        /// <summary>
        /// Gets or Sets CredentialReference
        /// </summary>
        [DataMember(Name = "credentialReference", EmitDefaultValue = false)]
        public EdFiCredentialReference CredentialReference { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name = "educationOrganizationReference", IsRequired = true, EmitDefaultValue = false)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets StaffReference
        /// </summary>
        [DataMember(Name = "staffReference", IsRequired = true, EmitDefaultValue = false)]
        public EdFiStaffReference StaffReference { get; set; }

        /// <summary>
        /// The department or suborganization the employee/contractor is associated with in the EducationOrganization.
        /// </summary>
        /// <value>The department or suborganization the employee/contractor is associated with in the EducationOrganization.</value>
        [DataMember(Name = "department", EmitDefaultValue = false)]
        public string Department { get; set; }

        /// <summary>
        /// The month, day, and year on which a contract between an individual and a governing authority ends or is terminated under the provisions of the contract (or the date on which the agreement is made invalid).
        /// </summary>
        /// <value>The month, day, and year on which a contract between an individual and a governing authority ends or is terminated under the provisions of the contract (or the date on which the agreement is made invalid).</value>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting.
        /// </summary>
        /// <value>The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting.</value>
        [DataMember(Name = "fullTimeEquivalency", EmitDefaultValue = false)]
        public double FullTimeEquivalency { get; set; }

        /// <summary>
        /// Hourly wage associated with the employment position being reported.
        /// </summary>
        /// <value>Hourly wage associated with the employment position being reported.</value>
        [DataMember(Name = "hourlyWage", EmitDefaultValue = false)]
        public double HourlyWage { get; set; }

        /// <summary>
        /// Date at which the staff member was made an official offer for this employment.
        /// </summary>
        /// <value>Date at which the staff member was made an official offer for this employment.</value>
        [DataMember(Name = "offerDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime OfferDate { get; set; }

        /// <summary>
        /// Type of employment separation; for example: Voluntary separation, Involuntary separation,         Mutual agreement         Other, etc.
        /// </summary>
        /// <value>Type of employment separation; for example: Voluntary separation, Involuntary separation,         Mutual agreement         Other, etc.</value>
        [DataMember(Name = "separationDescriptor", EmitDefaultValue = false)]
        public string SeparationDescriptor { get; set; }

        /// <summary>
        /// Reason for terminating the employment; for example:         Employment in education         Employment outside of education         Retirement         Family/personal relocation         Change of assignment.
        /// </summary>
        /// <value>Reason for terminating the employment; for example:         Employment in education         Employment outside of education         Retirement         Family/personal relocation         Change of assignment.</value>
        [DataMember(Name = "separationReasonDescriptor", EmitDefaultValue = false)]
        public string SeparationReasonDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// Gets or Sets Ext
        /// </summary>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public StaffEducationOrganizationEmploymentAssociationExtensions Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiStaffEducationOrganizationEmploymentAssociation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EmploymentStatusDescriptor: ").Append(EmploymentStatusDescriptor).Append("\n");
            sb.Append("  HireDate: ").Append(HireDate).Append("\n");
            sb.Append("  CredentialReference: ").Append(CredentialReference).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  StaffReference: ").Append(StaffReference).Append("\n");
            sb.Append("  Department: ").Append(Department).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  FullTimeEquivalency: ").Append(FullTimeEquivalency).Append("\n");
            sb.Append("  HourlyWage: ").Append(HourlyWage).Append("\n");
            sb.Append("  OfferDate: ").Append(OfferDate).Append("\n");
            sb.Append("  SeparationDescriptor: ").Append(SeparationDescriptor).Append("\n");
            sb.Append("  SeparationReasonDescriptor: ").Append(SeparationReasonDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiStaffEducationOrganizationEmploymentAssociation);
        }

        /// <summary>
        /// Returns true if EdFiStaffEducationOrganizationEmploymentAssociation instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiStaffEducationOrganizationEmploymentAssociation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiStaffEducationOrganizationEmploymentAssociation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.EmploymentStatusDescriptor == input.EmploymentStatusDescriptor ||
                    (this.EmploymentStatusDescriptor != null &&
                    this.EmploymentStatusDescriptor.Equals(input.EmploymentStatusDescriptor))
                ) && 
                (
                    this.HireDate == input.HireDate ||
                    (this.HireDate != null &&
                    this.HireDate.Equals(input.HireDate))
                ) && 
                (
                    this.CredentialReference == input.CredentialReference ||
                    (this.CredentialReference != null &&
                    this.CredentialReference.Equals(input.CredentialReference))
                ) && 
                (
                    this.EducationOrganizationReference == input.EducationOrganizationReference ||
                    (this.EducationOrganizationReference != null &&
                    this.EducationOrganizationReference.Equals(input.EducationOrganizationReference))
                ) && 
                (
                    this.StaffReference == input.StaffReference ||
                    (this.StaffReference != null &&
                    this.StaffReference.Equals(input.StaffReference))
                ) && 
                (
                    this.Department == input.Department ||
                    (this.Department != null &&
                    this.Department.Equals(input.Department))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.FullTimeEquivalency == input.FullTimeEquivalency ||
                    this.FullTimeEquivalency.Equals(input.FullTimeEquivalency)
                ) && 
                (
                    this.HourlyWage == input.HourlyWage ||
                    this.HourlyWage.Equals(input.HourlyWage)
                ) && 
                (
                    this.OfferDate == input.OfferDate ||
                    (this.OfferDate != null &&
                    this.OfferDate.Equals(input.OfferDate))
                ) && 
                (
                    this.SeparationDescriptor == input.SeparationDescriptor ||
                    (this.SeparationDescriptor != null &&
                    this.SeparationDescriptor.Equals(input.SeparationDescriptor))
                ) && 
                (
                    this.SeparationReasonDescriptor == input.SeparationReasonDescriptor ||
                    (this.SeparationReasonDescriptor != null &&
                    this.SeparationReasonDescriptor.Equals(input.SeparationReasonDescriptor))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                ) && 
                (
                    this.Ext == input.Ext ||
                    (this.Ext != null &&
                    this.Ext.Equals(input.Ext))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.EmploymentStatusDescriptor != null)
                    hashCode = hashCode * 59 + this.EmploymentStatusDescriptor.GetHashCode();
                if (this.HireDate != null)
                    hashCode = hashCode * 59 + this.HireDate.GetHashCode();
                if (this.CredentialReference != null)
                    hashCode = hashCode * 59 + this.CredentialReference.GetHashCode();
                if (this.EducationOrganizationReference != null)
                    hashCode = hashCode * 59 + this.EducationOrganizationReference.GetHashCode();
                if (this.StaffReference != null)
                    hashCode = hashCode * 59 + this.StaffReference.GetHashCode();
                if (this.Department != null)
                    hashCode = hashCode * 59 + this.Department.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                hashCode = hashCode * 59 + this.FullTimeEquivalency.GetHashCode();
                hashCode = hashCode * 59 + this.HourlyWage.GetHashCode();
                if (this.OfferDate != null)
                    hashCode = hashCode * 59 + this.OfferDate.GetHashCode();
                if (this.SeparationDescriptor != null)
                    hashCode = hashCode * 59 + this.SeparationDescriptor.GetHashCode();
                if (this.SeparationReasonDescriptor != null)
                    hashCode = hashCode * 59 + this.SeparationReasonDescriptor.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                if (this.Ext != null)
                    hashCode = hashCode * 59 + this.Ext.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EmploymentStatusDescriptor (string) maxLength
            if(this.EmploymentStatusDescriptor != null && this.EmploymentStatusDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmploymentStatusDescriptor, length must be less than 306.", new [] { "EmploymentStatusDescriptor" });
            }

            // Department (string) maxLength
            if(this.Department != null && this.Department.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Department, length must be less than 60.", new [] { "Department" });
            }

            // SeparationDescriptor (string) maxLength
            if(this.SeparationDescriptor != null && this.SeparationDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SeparationDescriptor, length must be less than 306.", new [] { "SeparationDescriptor" });
            }

            // SeparationReasonDescriptor (string) maxLength
            if(this.SeparationReasonDescriptor != null && this.SeparationReasonDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SeparationReasonDescriptor, length must be less than 306.", new [] { "SeparationReasonDescriptor" });
            }

            yield break;
        }
    }

}
