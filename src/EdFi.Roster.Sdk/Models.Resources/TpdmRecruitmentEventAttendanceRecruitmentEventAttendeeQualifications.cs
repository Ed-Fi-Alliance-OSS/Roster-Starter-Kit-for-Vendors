/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.Roster.Sdk.Client.OpenAPIDateConverter;

namespace EdFi.Roster.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications
    /// </summary>
    [DataContract(Name = "tpdm_recruitmentEventAttendanceRecruitmentEventAttendeeQualifications")]
    public partial class TpdmRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications : IEquatable<TpdmRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications" /> class.
        /// </summary>
        /// <param name="capacityToServe">An indication of whether or not a prospect mentor teacher has capacity to serve..</param>
        /// <param name="eligible">An indication of whether the prospect is eligible for the position. (required).</param>
        /// <param name="yearsOfServiceCurrentPlacement">The total number of years of service at the current school..</param>
        /// <param name="yearsOfServiceTotal">The total number of years of service as a teacher. (required).</param>
        public TpdmRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications(bool capacityToServe = default(bool), bool eligible = default(bool), double yearsOfServiceCurrentPlacement = default(double), double yearsOfServiceTotal = default(double))
        {
            this.Eligible = eligible;
            this.YearsOfServiceTotal = yearsOfServiceTotal;
            this.CapacityToServe = capacityToServe;
            this.YearsOfServiceCurrentPlacement = yearsOfServiceCurrentPlacement;
        }

        /// <summary>
        /// An indication of whether or not a prospect mentor teacher has capacity to serve.
        /// </summary>
        /// <value>An indication of whether or not a prospect mentor teacher has capacity to serve.</value>
        [DataMember(Name = "capacityToServe", EmitDefaultValue = true)]
        public bool CapacityToServe { get; set; }

        /// <summary>
        /// An indication of whether the prospect is eligible for the position.
        /// </summary>
        /// <value>An indication of whether the prospect is eligible for the position.</value>
        [DataMember(Name = "eligible", IsRequired = true, EmitDefaultValue = true)]
        public bool Eligible { get; set; }

        /// <summary>
        /// The total number of years of service at the current school.
        /// </summary>
        /// <value>The total number of years of service at the current school.</value>
        [DataMember(Name = "yearsOfServiceCurrentPlacement", EmitDefaultValue = false)]
        public double YearsOfServiceCurrentPlacement { get; set; }

        /// <summary>
        /// The total number of years of service as a teacher.
        /// </summary>
        /// <value>The total number of years of service as a teacher.</value>
        [DataMember(Name = "yearsOfServiceTotal", IsRequired = true, EmitDefaultValue = false)]
        public double YearsOfServiceTotal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications {\n");
            sb.Append("  CapacityToServe: ").Append(CapacityToServe).Append("\n");
            sb.Append("  Eligible: ").Append(Eligible).Append("\n");
            sb.Append("  YearsOfServiceCurrentPlacement: ").Append(YearsOfServiceCurrentPlacement).Append("\n");
            sb.Append("  YearsOfServiceTotal: ").Append(YearsOfServiceTotal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications);
        }

        /// <summary>
        /// Returns true if TpdmRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmRecruitmentEventAttendanceRecruitmentEventAttendeeQualifications input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CapacityToServe == input.CapacityToServe ||
                    this.CapacityToServe.Equals(input.CapacityToServe)
                ) && 
                (
                    this.Eligible == input.Eligible ||
                    this.Eligible.Equals(input.Eligible)
                ) && 
                (
                    this.YearsOfServiceCurrentPlacement == input.YearsOfServiceCurrentPlacement ||
                    this.YearsOfServiceCurrentPlacement.Equals(input.YearsOfServiceCurrentPlacement)
                ) && 
                (
                    this.YearsOfServiceTotal == input.YearsOfServiceTotal ||
                    this.YearsOfServiceTotal.Equals(input.YearsOfServiceTotal)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.CapacityToServe.GetHashCode();
                hashCode = hashCode * 59 + this.Eligible.GetHashCode();
                hashCode = hashCode * 59 + this.YearsOfServiceCurrentPlacement.GetHashCode();
                hashCode = hashCode * 59 + this.YearsOfServiceTotal.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
